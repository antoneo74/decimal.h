#include <stdio.h>
#include "s21_decimal.h"

s21_decimal decMax = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0}},
            decMin = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}},
            decZero = {{0, 0, 0, 0}};
void equal_bits(s21_decimal dec_res, s21_decimal result) {
    for (int i = 0; i <= 3; i++) {
        unsigned int dr = dec_res.bits[i];
        unsigned int r = result.bits[i];
        ck_assert_uint_eq(dr, r);
    }
}

#test s21_less_1
s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 2;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_2
s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 2.00;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000011001000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_3
s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_4
s21_decimal src1, src2;
int origin;
// src1 = 0.000000000000000000000000000;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000110110000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_5
s21_decimal src1, src2;
int origin;
// src1 = -3;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000011;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_6
s21_decimal src1, src2;
int origin;
// src1 = 2.222212;
// src2 = 2.222212;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
src2.bits[0] = 0b00000000001000011110100010000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_7
s21_decimal src1, src2;
int origin;
// src1 = 2.22221200000001000;
// src2 = 2.222212;
src1.bits[0] = 0b00000111100011111010001111101000;
src1.bits[1] = 0b00000011000101010111110100000001;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000100010000000000000000;
src2.bits[0] = 0b00000000001000011110100010000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_8
s21_decimal src1, src2;
int origin;
// src1 = 3.2222121;
// src2 = 3.222212;
src1.bits[0] = 0b00000001111010111010101110101001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001110000000000000000;
src2.bits[0] = 0b00000000001100010010101011000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_9
s21_decimal src1, src2;
int origin;
// src1 = 2.222212;
// src2 = -2.2222120002;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
src2.bits[0] = 0b00101100100010101010010001000010;
src2.bits[1] = 0b00000000000000000000000000000101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000010100000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_10
s21_decimal src1, src2;
int origin;
// src1 = -364748;
// src2 = 1;
src1.bits[0] = 0b00000000000001011001000011001100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_11
s21_decimal src1, src2;
int origin;
// src1 = 987456543210.0;
// src2 = 98745654321.0;
src1.bits[0] = 0b00011001111101110000001100100100;
src1.bits[1] = 0b00000000000000000000100011111011;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b11101000111111110001100111101010;
src2.bits[1] = 0b00000000000000000000000011100101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000010000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_12
s21_decimal src1, src2;
int origin;
// src1 = -9878798789.5867800;
// src2 = -9878798789.58678;
src1.bits[0] = 0b11001110100110111101100110011000;
src1.bits[1] = 0b00000001010111101111011100100110;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000001110000000000000000;
src2.bits[0] = 0b10110101010001000001111001010110;
src2.bits[1] = 0b00000000000000111000001001111000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000001010000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_13
s21_decimal src1, src2;
int origin;
// src1 = 9999999999999999999;
// src2 = 1;
src1.bits[0] = 0b10001001111001111111111111111111;
src1.bits[1] = 0b10001010110001110010001100000100;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_14
s21_decimal src1, src2;
int origin;
// src1 = 18446744073709551615;
// src2 = 18446744073709551615.000000000;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11000100011001010011011000000000;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b00111011100110101100100111111111;
src2.bits[3] = 0b00000000000010010000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_15
s21_decimal src1, src2;
int origin;
// src1 = 18446744073709551615.0;
// src2 = 965453154;
src1.bits[0] = 0b11111111111111111111111111110110;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000001001;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00111001100010111010010101100010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_16
s21_decimal src1, src2;
int origin;
// src1 = -545454512454545.35265454545645;
// src2 = -545454512454545.35265454545645;
src1.bits[0] = 0b10000010111000100101101011101101;
src1.bits[1] = 0b11111001111010000010010110101101;
src1.bits[2] = 0b10110000001111101111000010010100;
src1.bits[3] = 0b10000000000011100000000000000000;
src2.bits[0] = 0b10000010111000100101101011101101;
src2.bits[1] = 0b11111001111010000010010110101101;
src2.bits[2] = 0b10110000001111101111000010010100;
src2.bits[3] = 0b10000000000011100000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);


#test s21_less_17
s21_decimal src1, src2;
int origin;
// src1 = -545454512454545.35265454545645;
// src2 = -5.352654545456454545645464;
src1.bits[0] = 0b10000010111000100101101011101101;
src1.bits[1] = 0b11111001111010000010010110101101;
src1.bits[2] = 0b10110000001111101111000010010100;
src1.bits[3] = 0b10000000000011100000000000000000;
src2.bits[0] = 0b01001000000110110001111110011000;
src2.bits[1] = 0b11111011111111011000100101101101;
src2.bits[2] = 0b00000000000001000110110101110111;
src2.bits[3] = 0b10000000000110000000000000000000;
int result = s21_is_less(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_18
s21_decimal src1, src2;
int origin;
// src1 = 7961327845421.879754123131254;
// src2 = 7961327.845421879754123131254;
src1.bits[0] = 0b01001110111001000011100101110110;
src1.bits[1] = 0b01001011001101011010000111011001;
src1.bits[2] = 0b00011001101110010111010010111111;
src1.bits[3] = 0b00000000000011110000000000000000;
src2.bits[0] = 0b01001110111001000011100101110110;
src2.bits[1] = 0b01001011001101011010000111011001;
src2.bits[2] = 0b00011001101110010111010010111111;
src2.bits[3] = 0b00000000000101010000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_19
s21_decimal src1, src2;
int origin;
// src1 = 12345677.987654345678987654346;
// src2 = 12345677.987654000000000000000;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b00000000000101010000000000000000;
src2.bits[0] = 0b11100111110001110000000000000000;
src2.bits[1] = 0b11000000010001001001101110001101;
src2.bits[2] = 0b00100111111001000001101100000000;
src2.bits[3] = 0b00000000000101010000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_20
s21_decimal src1, src2;
int origin;
// src1 = -12345677.987654345678987654346;
// src2 = 87654323456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b10000000000101010000000000000000;
src2.bits[0] = 0b00010001110011011101000110000101;
src2.bits[1] = 0b11110101101111000110111111000000;
src2.bits[2] = 0b00000010110101010000111100111111;
src2.bits[3] = 0b00000000000100000000000000000000;
int result = s21_is_less(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_21
s21_decimal src1, src2;
int origin;
// src1 = -87654323456.98765456789876530;
// src2 = -87654323456.98765456789876531;
src1.bits[0] = 0b10110010000010100010111100110010;
src1.bits[1] = 0b10011001010111000101110110000000;
src1.bits[2] = 0b00011100010100101001100001111111;
src1.bits[3] = 0b10000000000100010000000000000000;
src2.bits[0] = 0b10110010000010100010111100110011;
src2.bits[1] = 0b10011001010111000101110110000000;
src2.bits[2] = 0b00011100010100101001100001111111;
src2.bits[3] = 0b10000000000100010000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_22
s21_decimal src1, src2;
int origin;
// src1 = -87654323456.98765456789876530;
// src2 = -87654323456.98765456789876530;
src1.bits[0] = 0b10110010000010100010111100110010;
src1.bits[1] = 0b10011001010111000101110110000000;
src1.bits[2] = 0b00011100010100101001100001111111;
src1.bits[3] = 0b10000000000100010000000000000000;
src2.bits[0] = 0b10110010000010100010111100110010;
src2.bits[1] = 0b10011001010111000101110110000000;
src2.bits[2] = 0b00011100010100101001100001111111;
src2.bits[3] = 0b10000000000100010000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_23
s21_decimal src1, src2;
int origin;
// src1 = 0.0;
// src2 = 0.69;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00000000000000000000000001000101;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_less(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_24
s21_decimal src1, src2;
int origin;
// src1 = -69.1234567;
// src2 = -69.12345670000000;
src1.bits[0] = 0b00101001001100110110011100000111;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000001110000000000000000;
src2.bits[0] = 0b11100100001110011001110110000000;
src2.bits[1] = 0b00000000000110001000111010111101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000011100000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_25
s21_decimal src1, src2;
int origin;
// src1 = 13436577854.000000000000;
// src2 = 13436577854;
src1.bits[0] = 0b00100110011110011110000000000000;
src1.bits[1] = 0b01100101111110011111000000101100;
src1.bits[2] = 0b00000000000000000000001011011000;
src1.bits[3] = 0b00000000000011000000000000000000;
src2.bits[0] = 0b00100000111000011110100000111110;
src2.bits[1] = 0b00000000000000000000000000000011;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_26
s21_decimal src1, src2;
int origin;
// src1 = 79228162514264337593543950335;
// src2 = 79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_27
s21_decimal src1, src2;
int origin;
// src1 = 79228162514264337593543950335;
// src2 = -79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b10000000000000000000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_28
s21_decimal src1, src2;
int origin;
// src1 = 665464545;
// src2 = 8798232189789785;
src1.bits[0] = 0b00100111101010100010111011100001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00010000010100101110011001011001;
src2.bits[1] = 0b00000000000111110100000111110010;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_29
s21_decimal src1, src2;
int origin;
// src1 = 2.7986531268974139743;
// src2 = 2.7986531268974139743;
src1.bits[0] = 0b11111110100100001101100101011111;
src1.bits[1] = 0b10000100011001000010000111101000;
src1.bits[2] = 0b00000000000000000000000000000001;
src1.bits[3] = 0b00000000000100110000000000000000;
src2.bits[0] = 0b11111110100100001101100101011111;
src2.bits[1] = 0b10000100011001000010000111101000;
src2.bits[2] = 0b00000000000000000000000000000001;
src2.bits[3] = 0b00000000000100110000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_30
s21_decimal src1, src2;
int origin;
// src1 = -2156878451.8547640000000000;
// src2 = -2156878451.854764;
src1.bits[0] = 0b10010011100100010011000000000000;
src1.bits[1] = 0b00100110110100100010010100001001;
src1.bits[2] = 0b00000000000100011101011101011110;
src1.bits[3] = 0b10000000000100000000000000000000;
src2.bits[0] = 0b01100101111100100100110110101100;
src2.bits[1] = 0b00000000000001111010100110101011;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000001100000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_31
s21_decimal src1, src2;
int origin;
// src1 = 0.5456465465486476846545465485;
// src2 = 5.4564654654864768465454654846;
src1.bits[0] = 0b00001011000011110111000010001101;
src1.bits[1] = 0b10010110101100000101100101010001;
src1.bits[2] = 0b00010001101000010111101110000001;
src1.bits[3] = 0b00000000000111000000000000000000;
src2.bits[0] = 0b01101110100110100110010101111110;
src2.bits[1] = 0b11100010111000110111110100101010;
src2.bits[2] = 0b10110000010011101101001100001111;
src2.bits[3] = 0b00000000000111000000000000000000;
int result = s21_is_less(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_32
s21_decimal src1, src2;
int origin;
// src1 = -7.7545545454546589781677545545;
// src2 = -7.7545545454546589781677545545;
src1.bits[0] = 0b00000101101101111001100001001001;
src1.bits[1] = 0b01101011011011011010110110010010;
src1.bits[2] = 0b11111010100100000010101111111010;
src1.bits[3] = 0b10000000000111000000000000000000;
src2.bits[0] = 0b00000101101101111001100001001001;
src2.bits[1] = 0b01101011011011011010110110010010;
src2.bits[2] = 0b11111010100100000010101111111010;
src2.bits[3] = 0b10000000000111000000000000000000;
int result = s21_is_less(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_33
s21_decimal src1, src2;
int origin;
// src1 = -79228162514264337593543950335;
// src2 = -792281625.14264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b10000000000101000000000000000000;
int result = s21_is_less(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);



#test s21_less_or_equal_1
s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 2;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_2
s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 2.00;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000011001000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_3
s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_4
s21_decimal src1, src2;
int origin;
// src1 = 0.000000000000000000000000000;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000110110000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_5
s21_decimal src1, src2;
int origin;
// src1 = -3;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000011;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_6
s21_decimal src1, src2;
int origin;
// src1 = 2.222212;
// src2 = 2.222212;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
src2.bits[0] = 0b00000000001000011110100010000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_7
s21_decimal src1, src2;
int origin;
// src1 = 2.22221200000001000;
// src2 = 2.222212;
src1.bits[0] = 0b00000111100011111010001111101000;
src1.bits[1] = 0b00000011000101010111110100000001;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000100010000000000000000;
src2.bits[0] = 0b00000000001000011110100010000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_8
s21_decimal src1, src2;
int origin;
// src1 = 3.2222121;
// src2 = 3.222212;
src1.bits[0] = 0b00000001111010111010101110101001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001110000000000000000;
src2.bits[0] = 0b00000000001100010010101011000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_9
s21_decimal src1, src2;
int origin;
// src1 = 2.222212;
// src2 = -2.2222120002;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
src2.bits[0] = 0b00101100100010101010010001000010;
src2.bits[1] = 0b00000000000000000000000000000101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000010100000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_10
s21_decimal src1, src2;
int origin;
// src1 = -364748;
// src2 = 1;
src1.bits[0] = 0b00000000000001011001000011001100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_11
s21_decimal src1, src2;
int origin;
// src1 = 987456543210.0;
// src2 = 98745654321.0;
src1.bits[0] = 0b00011001111101110000001100100100;
src1.bits[1] = 0b00000000000000000000100011111011;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b11101000111111110001100111101010;
src2.bits[1] = 0b00000000000000000000000011100101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000010000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_12
s21_decimal src1, src2;
int origin;
// src1 = -9878798789.5867800;
// src2 = -9878798789.58678;
src1.bits[0] = 0b11001110100110111101100110011000;
src1.bits[1] = 0b00000001010111101111011100100110;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000001110000000000000000;
src2.bits[0] = 0b10110101010001000001111001010110;
src2.bits[1] = 0b00000000000000111000001001111000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000001010000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_13
s21_decimal src1, src2;
int origin;
// src1 = 9999999999999999999;
// src2 = 1;
src1.bits[0] = 0b10001001111001111111111111111111;
src1.bits[1] = 0b10001010110001110010001100000100;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_14
s21_decimal src1, src2;
int origin;
// src1 = 18446744073709551615;
// src2 = 18446744073709551615.000000000;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11000100011001010011011000000000;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b00111011100110101100100111111111;
src2.bits[3] = 0b00000000000010010000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_15
s21_decimal src1, src2;
int origin;
// src1 = 18446744073709551615.0;
// src2 = 965453154;
src1.bits[0] = 0b11111111111111111111111111110110;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000001001;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00111001100010111010010101100010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_16
s21_decimal src1, src2;
int origin;
// src1 = -545454512454545.35265454545645;
// src2 = -545454512454545.35265454545645;
src1.bits[0] = 0b10000010111000100101101011101101;
src1.bits[1] = 0b11111001111010000010010110101101;
src1.bits[2] = 0b10110000001111101111000010010100;
src1.bits[3] = 0b10000000000011100000000000000000;
src2.bits[0] = 0b10000010111000100101101011101101;
src2.bits[1] = 0b11111001111010000010010110101101;
src2.bits[2] = 0b10110000001111101111000010010100;
src2.bits[3] = 0b10000000000011100000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_17
s21_decimal src1, src2;
int origin;
// src1 = -545454512454545.35265454545645;
// src2 = -5.352654545456454545645464;
src1.bits[0] = 0b10000010111000100101101011101101;
src1.bits[1] = 0b11111001111010000010010110101101;
src1.bits[2] = 0b10110000001111101111000010010100;
src1.bits[3] = 0b10000000000011100000000000000000;
src2.bits[0] = 0b01001000000110110001111110011000;
src2.bits[1] = 0b11111011111111011000100101101101;
src2.bits[2] = 0b00000000000001000110110101110111;
src2.bits[3] = 0b10000000000110000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_18
s21_decimal src1, src2;
int origin;
// src1 = 7961327845421.879754123131254;
// src2 = 7961327.845421879754123131254;
src1.bits[0] = 0b01001110111001000011100101110110;
src1.bits[1] = 0b01001011001101011010000111011001;
src1.bits[2] = 0b00011001101110010111010010111111;
src1.bits[3] = 0b00000000000011110000000000000000;
src2.bits[0] = 0b01001110111001000011100101110110;
src2.bits[1] = 0b01001011001101011010000111011001;
src2.bits[2] = 0b00011001101110010111010010111111;
src2.bits[3] = 0b00000000000101010000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_19
s21_decimal src1, src2;
int origin;
// src1 = 12345677.987654345678987654346;
// src2 = 12345677.987654000000000000000;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b00000000000101010000000000000000;
src2.bits[0] = 0b11100111110001110000000000000000;
src2.bits[1] = 0b11000000010001001001101110001101;
src2.bits[2] = 0b00100111111001000001101100000000;
src2.bits[3] = 0b00000000000101010000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_20
s21_decimal src1, src2;
int origin;
// src1 = -12345677.987654345678987654346;
// src2 = 87654323456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b10000000000101010000000000000000;
src2.bits[0] = 0b00010001110011011101000110000101;
src2.bits[1] = 0b11110101101111000110111111000000;
src2.bits[2] = 0b00000010110101010000111100111111;
src2.bits[3] = 0b00000000000100000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_21
s21_decimal src1, src2;
int origin;
// src1 = -87654323456.98765456789876530;
// src2 = -87654323456.98765456789876531;
src1.bits[0] = 0b10110010000010100010111100110010;
src1.bits[1] = 0b10011001010111000101110110000000;
src1.bits[2] = 0b00011100010100101001100001111111;
src1.bits[3] = 0b10000000000100010000000000000000;
src2.bits[0] = 0b10110010000010100010111100110011;
src2.bits[1] = 0b10011001010111000101110110000000;
src2.bits[2] = 0b00011100010100101001100001111111;
src2.bits[3] = 0b10000000000100010000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_22
s21_decimal src1, src2;
int origin;
// src1 = -87654323456.98765456789876530;
// src2 = -87654323456.98765456789876530;
src1.bits[0] = 0b10110010000010100010111100110010;
src1.bits[1] = 0b10011001010111000101110110000000;
src1.bits[2] = 0b00011100010100101001100001111111;
src1.bits[3] = 0b10000000000100010000000000000000;
src2.bits[0] = 0b10110010000010100010111100110010;
src2.bits[1] = 0b10011001010111000101110110000000;
src2.bits[2] = 0b00011100010100101001100001111111;
src2.bits[3] = 0b10000000000100010000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_23
s21_decimal src1, src2;
int origin;
// src1 = 0.0;
// src2 = 0.69;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00000000000000000000000001000101;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_24
s21_decimal src1, src2;
int origin;
// src1 = -69.1234567;
// src2 = -69.12345670000000;
src1.bits[0] = 0b00101001001100110110011100000111;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000001110000000000000000;
src2.bits[0] = 0b11100100001110011001110110000000;
src2.bits[1] = 0b00000000000110001000111010111101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000011100000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_25
s21_decimal src1, src2;
int origin;
// src1 = 13436577854.000000000000;
// src2 = 13436577854;
src1.bits[0] = 0b00100110011110011110000000000000;
src1.bits[1] = 0b01100101111110011111000000101100;
src1.bits[2] = 0b00000000000000000000001011011000;
src1.bits[3] = 0b00000000000011000000000000000000;
src2.bits[0] = 0b00100000111000011110100000111110;
src2.bits[1] = 0b00000000000000000000000000000011;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_26
s21_decimal src1, src2;
int origin;
// src1 = 79228162514264337593543950335;
// src2 = 79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_27
s21_decimal src1, src2;
int origin;
// src1 = 79228162514264337593543950335;
// src2 = -79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b10000000000000000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_28
s21_decimal src1, src2;
int origin;
// src1 = 665464545;
// src2 = 8798232189789785;
src1.bits[0] = 0b00100111101010100010111011100001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00010000010100101110011001011001;
src2.bits[1] = 0b00000000000111110100000111110010;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_29
s21_decimal src1, src2;
int origin;
// src1 = 2.7986531268974139743;
// src2 = 2.7986531268974139743;
src1.bits[0] = 0b11111110100100001101100101011111;
src1.bits[1] = 0b10000100011001000010000111101000;
src1.bits[2] = 0b00000000000000000000000000000001;
src1.bits[3] = 0b00000000000100110000000000000000;
src2.bits[0] = 0b11111110100100001101100101011111;
src2.bits[1] = 0b10000100011001000010000111101000;
src2.bits[2] = 0b00000000000000000000000000000001;
src2.bits[3] = 0b00000000000100110000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_30
s21_decimal src1, src2;
int origin;
// src1 = -2156878451.8547640000000000;
// src2 = -2156878451.854764;
src1.bits[0] = 0b10010011100100010011000000000000;
src1.bits[1] = 0b00100110110100100010010100001001;
src1.bits[2] = 0b00000000000100011101011101011110;
src1.bits[3] = 0b10000000000100000000000000000000;
src2.bits[0] = 0b01100101111100100100110110101100;
src2.bits[1] = 0b00000000000001111010100110101011;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000001100000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_31
s21_decimal src1, src2;
int origin;
// src1 = 0.5456465465486476846545465485;
// src2 = 5.4564654654864768465454654846;
src1.bits[0] = 0b00001011000011110111000010001101;
src1.bits[1] = 0b10010110101100000101100101010001;
src1.bits[2] = 0b00010001101000010111101110000001;
src1.bits[3] = 0b00000000000111000000000000000000;
src2.bits[0] = 0b01101110100110100110010101111110;
src2.bits[1] = 0b11100010111000110111110100101010;
src2.bits[2] = 0b10110000010011101101001100001111;
src2.bits[3] = 0b00000000000111000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_32
s21_decimal src1, src2;
int origin;
// src1 = -7.7545545454546589781677545545;
// src2 = -7.7545545454546589781677545545;
src1.bits[0] = 0b00000101101101111001100001001001;
src1.bits[1] = 0b01101011011011011010110110010010;
src1.bits[2] = 0b11111010100100000010101111111010;
src1.bits[3] = 0b10000000000111000000000000000000;
src2.bits[0] = 0b00000101101101111001100001001001;
src2.bits[1] = 0b01101011011011011010110110010010;
src2.bits[2] = 0b11111010100100000010101111111010;
src2.bits[3] = 0b10000000000111000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_33
s21_decimal src1, src2;
int origin;
// src1 = -79228162514264337593543950335;
// src2 = -792281625.14264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b10000000000101000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_34
s21_decimal src1, src2;
int origin;
// src1 = 675432788976.5424354657687;
// src2 = 67543278.89765424354657687;
src1.bits[0] = 0b10111110000100011000010110010111;
src1.bits[1] = 0b11011001001111010001001011000110;
src1.bits[2] = 0b00000000000001011001011001001000;
src1.bits[3] = 0b00000000000011010000000000000000;
src2.bits[0] = 0b10111110000100011000010110010111;
src2.bits[1] = 0b11011001001111010001001011000110;
src2.bits[2] = 0b00000000000001011001011001001000;
src2.bits[3] = 0b00000000000100010000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_35
s21_decimal src1, src2;
int origin;
// src1 = -579895323215489956.67897455465;
// src2 = -579895323215489956.67897455465;
src1.bits[0] = 0b11100110001001011001001101101001;
src1.bits[1] = 0b00111000110110101110001010110100;
src1.bits[2] = 0b10111011010111111101000100011110;
src1.bits[3] = 0b10000000000010110000000000000000;
src2.bits[0] = 0b11100110001001011001001101101001;
src2.bits[1] = 0b00111000110110101110001010110100;
src2.bits[2] = 0b10111011010111111101000100011110;
src2.bits[3] = 0b10000000000010110000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_36
s21_decimal src1, src2;
int origin;
// src1 = 18446744073709551615.0;
// src2 = 1844674407370955161.50;
src1.bits[0] = 0b11111111111111111111111111110110;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000001001;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b11111111111111111111111111110110;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b00000000000000000000000000001001;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_less_or_equal_37
s21_decimal src1, src2;
int origin;
// src1 = 44073709551615.0;
// src2 = 44073709551615.00000000;
src1.bits[0] = 0b00011010000001000111111111110110;
src1.bits[1] = 0b00000000000000011001000011011001;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b10011111010010100001111100000000;
src2.bits[1] = 0b11101100100011110001010001110111;
src2.bits[2] = 0b00000000000000000000000011101110;
src2.bits[3] = 0b00000000000010000000000000000000;
int result = s21_is_less_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);


#test s21_greater_1
s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 2;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_2
s21_decimal src1, src2;
int origin;
// src1 = 457;
// src2 = 2.00;
src1.bits[0] = 0b00000000000000000000000111001001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000011001000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_greater(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_3
s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 54;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000110110;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_4
s21_decimal src1, src2;
int origin;
// src1 = 0.000000000000000000000000000;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000110110000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_5
s21_decimal src1, src2;
int origin;
// src1 = -3;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000011;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_6
s21_decimal src1, src2;
int origin;
// src1 = 2.222212;
// src2 = 2.222212;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
src2.bits[0] = 0b00000000001000011110100010000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_7
s21_decimal src1, src2;
int origin;
// src1 = 2.22221200000001000;
// src2 = 2.222212;
src1.bits[0] = 0b00000111100011111010001111101000;
src1.bits[1] = 0b00000011000101010111110100000001;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000100010000000000000000;
src2.bits[0] = 0b00000000001000011110100010000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_greater(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_8
s21_decimal src1, src2;
int origin;
// src1 = 3.745754741;
// src2 = 3.222212;
src1.bits[0] = 0b11011111010000111010111001110101;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000010010000000000000000;
src2.bits[0] = 0b00000000001100010010101011000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_greater(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_9
s21_decimal src1, src2;
int origin;
// src1 = 2.222212;
// src2 = -2.2222120002;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
src2.bits[0] = 0b00101100100010101010010001000010;
src2.bits[1] = 0b00000000000000000000000000000101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000010100000000000000000;
int result = s21_is_greater(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_10
s21_decimal src1, src2;
int origin;
// src1 = -364748;
// src2 = 1;
src1.bits[0] = 0b00000000000001011001000011001100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_11
s21_decimal src1, src2;
int origin;
// src1 = 987456543210.0;
// src2 = 98745654321.0;
src1.bits[0] = 0b00011001111101110000001100100100;
src1.bits[1] = 0b00000000000000000000100011111011;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b11101000111111110001100111101010;
src2.bits[1] = 0b00000000000000000000000011100101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000010000000000000000;
int result = s21_is_greater(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_12
s21_decimal src1, src2;
int origin;
// src1 = -9878798789.5867800;
// src2 = -9878798789.58678;
src1.bits[0] = 0b11001110100110111101100110011000;
src1.bits[1] = 0b00000001010111101111011100100110;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000001110000000000000000;
src2.bits[0] = 0b10110101010001000001111001010110;
src2.bits[1] = 0b00000000000000111000001001111000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000001010000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_13
s21_decimal src1, src2;
int origin;
// src1 = 9999999999999999999;
// src2 = 1;
src1.bits[0] = 0b10001001111001111111111111111111;
src1.bits[1] = 0b10001010110001110010001100000100;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_14
s21_decimal src1, src2;
int origin;
// src1 = 18446744073709551615;
// src2 = 434345343551615.00000000000;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b01000110001111010001100000000000;
src2.bits[1] = 0b11010011010011111110100110011101;
src2.bits[2] = 0b00000000001000111110110110011110;
src2.bits[3] = 0b00000000000010110000000000000000;
int result = s21_is_greater(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_15
s21_decimal src1, src2;
int origin;
// src1 = 18446744073709551615.0;
// src2 = 965453154;
src1.bits[0] = 0b11111111111111111111111111110110;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000001001;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00111001100010111010010101100010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_16
s21_decimal src1, src2;
int origin;
// src1 = -796214545.3526545454564545456;
// src2 = -545454512454545.35265454545645;
src1.bits[0] = 0b10111111111111101001001110110000;
src1.bits[1] = 0b11101010111111101111100111101000;
src1.bits[2] = 0b00011001101110100010000111100001;
src1.bits[3] = 0b10000000000100110000000000000000;
src2.bits[0] = 0b10000010111000100101101011101101;
src2.bits[1] = 0b11111001111010000010010110101101;
src2.bits[2] = 0b10110000001111101111000010010100;
src2.bits[3] = 0b10000000000011100000000000000000;
int result = s21_is_greater(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_17
s21_decimal src1, src2;
int origin;
// src1 = -545454512454545.35265454545645;
// src2 = -5.352654545456454545645464;
src1.bits[0] = 0b10000010111000100101101011101101;
src1.bits[1] = 0b11111001111010000010010110101101;
src1.bits[2] = 0b10110000001111101111000010010100;
src1.bits[3] = 0b10000000000011100000000000000000;
src2.bits[0] = 0b01001000000110110001111110011000;
src2.bits[1] = 0b11111011111111011000100101101101;
src2.bits[2] = 0b00000000000001000110110101110111;
src2.bits[3] = 0b10000000000110000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_18
s21_decimal src1, src2;
int origin;
// src1 = -7961327845421.843434341378545;
// src2 = 7961327.845421879754123131254;
src1.bits[0] = 0b11110011001100111010100111110001;
src1.bits[1] = 0b01001011001101011000000011010000;
src1.bits[2] = 0b00011001101110010111010010111111;
src1.bits[3] = 0b10000000000011110000000000000000;
src2.bits[0] = 0b01001110111001000011100101110110;
src2.bits[1] = 0b01001011001101011010000111011001;
src2.bits[2] = 0b00011001101110010111010010111111;
src2.bits[3] = 0b00000000000101010000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_19
s21_decimal src1, src2;
int origin;
// src1 = 12345677.987654345678987654346;
// src2 = 12345677.987654000000000000000;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b00000000000101010000000000000000;
src2.bits[0] = 0b11100111110001110000000000000000;
src2.bits[1] = 0b11000000010001001001101110001101;
src2.bits[2] = 0b00100111111001000001101100000000;
src2.bits[3] = 0b00000000000101010000000000000000;
int result = s21_is_greater(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_20
s21_decimal src1, src2;
int origin;
// src1 = 12345677.987654345678987654346;
// src2 = 145752736456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b00000000000101010000000000000000;
src2.bits[0] = 0b10001101100101011101000110000101;
src2.bits[1] = 0b11000001100101010111000111101011;
src2.bits[2] = 0b00000100101101011010001101101100;
src2.bits[3] = 0b00000000000100000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_21
s21_decimal src1, src2;
int origin;
// src1 = 87654323456.98765456789876530;
// src2 = -87654323456.98765456789876531;
src1.bits[0] = 0b10110010000010100010111100110010;
src1.bits[1] = 0b10011001010111000101110110000000;
src1.bits[2] = 0b00011100010100101001100001111111;
src1.bits[3] = 0b00000000000100010000000000000000;
src2.bits[0] = 0b10110010000010100010111100110011;
src2.bits[1] = 0b10011001010111000101110110000000;
src2.bits[2] = 0b00011100010100101001100001111111;
src2.bits[3] = 0b10000000000100010000000000000000;
int result = s21_is_greater(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_22
s21_decimal src1, src2;
int origin;
// src1 = -854764561465456456.9876545679;
// src2 = -87654323456.98765456789876530;
src1.bits[0] = 0b11000100000001000100000010001111;
src1.bits[1] = 0b01000000100100100110001100010101;
src1.bits[2] = 0b00011011100111100111001001011101;
src1.bits[3] = 0b10000000000010100000000000000000;
src2.bits[0] = 0b10110010000010100010111100110010;
src2.bits[1] = 0b10011001010111000101110110000000;
src2.bits[2] = 0b00011100010100101001100001111111;
src2.bits[3] = 0b10000000000100010000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_23
s21_decimal src1, src2;
int origin;
// src1 = 0.0;
// src2 = 0.69;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00000000000000000000000001000101;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_24
s21_decimal src1, src2;
int origin;
// src1 = -69.1234567;
// src2 = -69.12345670000000;
src1.bits[0] = 0b00101001001100110110011100000111;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000001110000000000000000;
src2.bits[0] = 0b11100100001110011001110110000000;
src2.bits[1] = 0b00000000000110001000111010111101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000011100000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_25
s21_decimal src1, src2;
int origin;
// src1 = 13436577854.000000000000;
// src2 = 13436577854;
src1.bits[0] = 0b00100110011110011110000000000000;
src1.bits[1] = 0b01100101111110011111000000101100;
src1.bits[2] = 0b00000000000000000000001011011000;
src1.bits[3] = 0b00000000000011000000000000000000;
src2.bits[0] = 0b00100000111000011110100000111110;
src2.bits[1] = 0b00000000000000000000000000000011;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_26
s21_decimal src1, src2;
int origin;
// src1 = 79228162514264337593543950335;
// src2 = 79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_27
s21_decimal src1, src2;
int origin;
// src1 = 79228162514264337593543950335;
// src2 = -79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b10000000000000000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_28
s21_decimal src1, src2;
int origin;
// src1 = 665464545;
// src2 = 8798232189789785;
src1.bits[0] = 0b00100111101010100010111011100001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00010000010100101110011001011001;
src2.bits[1] = 0b00000000000111110100000111110010;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_29
s21_decimal src1, src2;
int origin;
// src1 = 2.7986531268974139743;
// src2 = 2.7986531268974139743;
src1.bits[0] = 0b11111110100100001101100101011111;
src1.bits[1] = 0b10000100011001000010000111101000;
src1.bits[2] = 0b00000000000000000000000000000001;
src1.bits[3] = 0b00000000000100110000000000000000;
src2.bits[0] = 0b11111110100100001101100101011111;
src2.bits[1] = 0b10000100011001000010000111101000;
src2.bits[2] = 0b00000000000000000000000000000001;
src2.bits[3] = 0b00000000000100110000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_30
s21_decimal src1, src2;
int origin;
// src1 = -2156878451.8547640000000000;
// src2 = -2156878451.854764;
src1.bits[0] = 0b10010011100100010011000000000000;
src1.bits[1] = 0b00100110110100100010010100001001;
src1.bits[2] = 0b00000000000100011101011101011110;
src1.bits[3] = 0b10000000000100000000000000000000;
src2.bits[0] = 0b01100101111100100100110110101100;
src2.bits[1] = 0b00000000000001111010100110101011;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000001100000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_31
s21_decimal src1, src2;
int origin;
// src1 = 0.5456465465486476846545465485;
// src2 = 45645405.456456345684654546548;
src1.bits[0] = 0b00001011000011110111000010001101;
src1.bits[1] = 0b10010110101100000101100101010001;
src1.bits[2] = 0b00010001101000010111101110000001;
src1.bits[3] = 0b00000000000111000000000000000000;
src2.bits[0] = 0b01000110110111011101111001110100;
src2.bits[1] = 0b11111110010110110111101101110010;
src2.bits[2] = 0b10010011011111001111111010010011;
src2.bits[3] = 0b00000000000101010000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_32
s21_decimal src1, src2;
int origin;
// src1 = -776890.75455454213415678965898;
// src2 = -7.7545545454546589781677545545;
src1.bits[0] = 0b11000010010111101111100010001010;
src1.bits[1] = 0b01011100000101000111000011011000;
src1.bits[2] = 0b11111011000001101110010110100011;
src1.bits[3] = 0b10000000000101110000000000000000;
src2.bits[0] = 0b00000101101101111001100001001001;
src2.bits[1] = 0b01101011011011011010110110010010;
src2.bits[2] = 0b11111010100100000010101111111010;
src2.bits[3] = 0b10000000000111000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_33
s21_decimal src1, src2;
int origin;
// src1 = -732123534337593543950335.12;
// src2 = -792281625.14264337593543950335;
src1.bits[0] = 0b11000011000110111111111110101000;
src1.bits[1] = 0b10100001110111010100101100101110;
src1.bits[2] = 0b00000000001111001000111101010001;
src1.bits[3] = 0b10000000000000100000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b10000000000101000000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_34
s21_decimal src1, src2;
int origin;
// src1 = 675432788976.5424354657687;
// src2 = 67543278.89765424354657687;
src1.bits[0] = 0b10111110000100011000010110010111;
src1.bits[1] = 0b11011001001111010001001011000110;
src1.bits[2] = 0b00000000000001011001011001001000;
src1.bits[3] = 0b00000000000011010000000000000000;
src2.bits[0] = 0b10111110000100011000010110010111;
src2.bits[1] = 0b11011001001111010001001011000110;
src2.bits[2] = 0b00000000000001011001011001001000;
src2.bits[3] = 0b00000000000100010000000000000000;
int result = s21_is_greater(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_35
s21_decimal src1, src2;
int origin;
// src1 = -579895323215489956.67897455465;
// src2 = -579895323215489956.67897455465;
src1.bits[0] = 0b11100110001001011001001101101001;
src1.bits[1] = 0b00111000110110101110001010110100;
src1.bits[2] = 0b10111011010111111101000100011110;
src1.bits[3] = 0b10000000000010110000000000000000;
src2.bits[0] = 0b11100110001001011001001101101001;
src2.bits[1] = 0b00111000110110101110001010110100;
src2.bits[2] = 0b10111011010111111101000100011110;
src2.bits[3] = 0b10000000000010110000000000000000;
int result = s21_is_greater(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);


#test s21_greater_or_equal_1
s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 2;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_2
s21_decimal src1, src2;
int origin;
// src1 = 457;
// src2 = 2.00;
src1.bits[0] = 0b00000000000000000000000111001001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000011001000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_3
s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 54;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000110110;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_4
s21_decimal src1, src2;
int origin;
// src1 = -0.000000000000000000000000000;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000110110000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_5
s21_decimal src1, src2;
int origin;
// src1 = -3;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000011;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_6
s21_decimal src1, src2;
int origin;
// src1 = 2.222212;
// src2 = 2.222212;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
src2.bits[0] = 0b00000000001000011110100010000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_7
s21_decimal src1, src2;
int origin;
// src1 = 2.22221200000001000;
// src2 = 2.222212;
src1.bits[0] = 0b00000111100011111010001111101000;
src1.bits[1] = 0b00000011000101010111110100000001;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000100010000000000000000;
src2.bits[0] = 0b00000000001000011110100010000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_8
s21_decimal src1, src2;
int origin;
// src1 = 3.745754741;
// src2 = 3.222212;
src1.bits[0] = 0b11011111010000111010111001110101;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000010010000000000000000;
src2.bits[0] = 0b00000000001100010010101011000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_9
s21_decimal src1, src2;
int origin;
// src1 = 2.222212;
// src2 = -2.2222120002;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
src2.bits[0] = 0b00101100100010101010010001000010;
src2.bits[1] = 0b00000000000000000000000000000101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000010100000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_10
s21_decimal src1, src2;
int origin;
// src1 = -364748;
// src2 = 1;
src1.bits[0] = 0b00000000000001011001000011001100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_11
  s21_decimal src1, src2;
  int origin;
  // src1 = 987456543210.0;
  // src2 = 98745654321.0;
  src1.bits[0] = 0b00011001111101110000001100100100;
  src1.bits[1] = 0b00000000000000000000100011111011;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000010000000000000000;
  src2.bits[0] = 0b11101000111111110001100111101010;
  src2.bits[1] = 0b00000000000000000000000011100101;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000010000000000000000;
  int result = s21_is_greater_or_equal(src1, src2);
  origin = 1;
  ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_12
s21_decimal src1, src2;
int origin;
// src1 = -9878798789.5867800;
// src2 = -9878798789.58678;
src1.bits[0] = 0b11001110100110111101100110011000;
src1.bits[1] = 0b00000001010111101111011100100110;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000001110000000000000000;
src2.bits[0] = 0b10110101010001000001111001010110;
src2.bits[1] = 0b00000000000000111000001001111000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000001010000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_13
s21_decimal src1, src2;
int origin;
// src1 = 9999999999999999999;
// src2 = 1;
src1.bits[0] = 0b10001001111001111111111111111111;
src1.bits[1] = 0b10001010110001110010001100000100;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_14
s21_decimal src1, src2;
int origin;
// src1 = 18446744073709551615;
// src2 = 434345343551615.00000000000;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b01000110001111010001100000000000;
src2.bits[1] = 0b11010011010011111110100110011101;
src2.bits[2] = 0b00000000001000111110110110011110;
src2.bits[3] = 0b00000000000010110000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_15
s21_decimal src1, src2;
int origin;
// src1 = 18446744073709551615.0;
// src2 = 965453154;
src1.bits[0] = 0b11111111111111111111111111110110;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000001001;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00111001100010111010010101100010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_16
s21_decimal src1, src2;
int origin;
// src1 = -796214545.3526545454564545456;
// src2 = -545454512454545.35265454545645;
src1.bits[0] = 0b10111111111111101001001110110000;
src1.bits[1] = 0b11101010111111101111100111101000;
src1.bits[2] = 0b00011001101110100010000111100001;
src1.bits[3] = 0b10000000000100110000000000000000;
src2.bits[0] = 0b10000010111000100101101011101101;
src2.bits[1] = 0b11111001111010000010010110101101;
src2.bits[2] = 0b10110000001111101111000010010100;
src2.bits[3] = 0b10000000000011100000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_17
s21_decimal src1, src2;
int origin;
// src1 = -545454512454545.35265454545645;
// src2 = -5.352654545456454545645464;
src1.bits[0] = 0b10000010111000100101101011101101;
src1.bits[1] = 0b11111001111010000010010110101101;
src1.bits[2] = 0b10110000001111101111000010010100;
src1.bits[3] = 0b10000000000011100000000000000000;
src2.bits[0] = 0b01001000000110110001111110011000;
src2.bits[1] = 0b11111011111111011000100101101101;
src2.bits[2] = 0b00000000000001000110110101110111;
src2.bits[3] = 0b10000000000110000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_18
s21_decimal src1, src2;
int origin;
// src1 = -7961327845421.843434341378545;
// src2 = 7961327.845421879754123131254;
src1.bits[0] = 0b11110011001100111010100111110001;
src1.bits[1] = 0b01001011001101011000000011010000;
src1.bits[2] = 0b00011001101110010111010010111111;
src1.bits[3] = 0b10000000000011110000000000000000;
src2.bits[0] = 0b01001110111001000011100101110110;
src2.bits[1] = 0b01001011001101011010000111011001;
src2.bits[2] = 0b00011001101110010111010010111111;
src2.bits[3] = 0b00000000000101010000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_19
s21_decimal src1, src2;
int origin;
// src1 = 12345677.987654345678987654346;
// src2 = 12345677.987654000000000000000;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b00000000000101010000000000000000;
src2.bits[0] = 0b11100111110001110000000000000000;
src2.bits[1] = 0b11000000010001001001101110001101;
src2.bits[2] = 0b00100111111001000001101100000000;
src2.bits[3] = 0b00000000000101010000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_20
s21_decimal src1, src2;
int origin;
// src1 = 12345677.987654345678987654346;
// src2 = 145752736456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b00000000000101010000000000000000;
src2.bits[0] = 0b10001101100101011101000110000101;
src2.bits[1] = 0b11000001100101010111000111101011;
src2.bits[2] = 0b00000100101101011010001101101100;
src2.bits[3] = 0b00000000000100000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_21
s21_decimal src1, src2;
int origin;
// src1 = 87654323456.98765456789876530;
// src2 = -87654323456.98765456789876531;
src1.bits[0] = 0b10110010000010100010111100110010;
src1.bits[1] = 0b10011001010111000101110110000000;
src1.bits[2] = 0b00011100010100101001100001111111;
src1.bits[3] = 0b00000000000100010000000000000000;
src2.bits[0] = 0b10110010000010100010111100110011;
src2.bits[1] = 0b10011001010111000101110110000000;
src2.bits[2] = 0b00011100010100101001100001111111;
src2.bits[3] = 0b10000000000100010000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_22
s21_decimal src1, src2;
int origin;
// src1 = -854764561465456456.9876545679;
// src2 = -87654323456.98765456789876530;
src1.bits[0] = 0b11000100000001000100000010001111;
src1.bits[1] = 0b01000000100100100110001100010101;
src1.bits[2] = 0b00011011100111100111001001011101;
src1.bits[3] = 0b10000000000010100000000000000000;
src2.bits[0] = 0b10110010000010100010111100110010;
src2.bits[1] = 0b10011001010111000101110110000000;
src2.bits[2] = 0b00011100010100101001100001111111;
src2.bits[3] = 0b10000000000100010000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_23
s21_decimal src1, src2;
int origin;
// src1 = 0.0;
// src2 = 0.69;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00000000000000000000000001000101;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_24
s21_decimal src1, src2;
int origin;
// src1 = -69.1234567;
// src2 = -69.12345670000000;
src1.bits[0] = 0b00101001001100110110011100000111;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000001110000000000000000;
src2.bits[0] = 0b11100100001110011001110110000000;
src2.bits[1] = 0b00000000000110001000111010111101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000011100000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_25
s21_decimal src1, src2;
int origin;
// src1 = 13436577854.000000000000;
// src2 = 13436577854;
src1.bits[0] = 0b00100110011110011110000000000000;
src1.bits[1] = 0b01100101111110011111000000101100;
src1.bits[2] = 0b00000000000000000000001011011000;
src1.bits[3] = 0b00000000000011000000000000000000;
src2.bits[0] = 0b00100000111000011110100000111110;
src2.bits[1] = 0b00000000000000000000000000000011;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_26
s21_decimal src1, src2;
int origin;
// src1 = 79228162514264337593543950335;
// src2 = 79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_27
s21_decimal src1, src2;
int origin;
// src1 = 79228162514264337593543950335;
// src2 = -79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b10000000000000000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_28
s21_decimal src1, src2;
int origin;
// src1 = 665464545;
// src2 = 8798232189789785;
src1.bits[0] = 0b00100111101010100010111011100001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00010000010100101110011001011001;
src2.bits[1] = 0b00000000000111110100000111110010;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_29
s21_decimal src1, src2;
int origin;
// src1 = 2.7986531268974139743;
// src2 = 2.7986531268974139743;
src1.bits[0] = 0b11111110100100001101100101011111;
src1.bits[1] = 0b10000100011001000010000111101000;
src1.bits[2] = 0b00000000000000000000000000000001;
src1.bits[3] = 0b00000000000100110000000000000000;
src2.bits[0] = 0b11111110100100001101100101011111;
src2.bits[1] = 0b10000100011001000010000111101000;
src2.bits[2] = 0b00000000000000000000000000000001;
src2.bits[3] = 0b00000000000100110000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_30
s21_decimal src1, src2;
int origin;
// src1 = -2156878451.8547640000000000;
// src2 = -2156878451.854764;
src1.bits[0] = 0b10010011100100010011000000000000;
src1.bits[1] = 0b00100110110100100010010100001001;
src1.bits[2] = 0b00000000000100011101011101011110;
src1.bits[3] = 0b10000000000100000000000000000000;
src2.bits[0] = 0b01100101111100100100110110101100;
src2.bits[1] = 0b00000000000001111010100110101011;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000001100000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_31
s21_decimal src1, src2;
int origin;
// src1 = 0.5456465465486476846545465485;
// src2 = 45645405.456456345684654546548;
src1.bits[0] = 0b00001011000011110111000010001101;
src1.bits[1] = 0b10010110101100000101100101010001;
src1.bits[2] = 0b00010001101000010111101110000001;
src1.bits[3] = 0b00000000000111000000000000000000;
src2.bits[0] = 0b01000110110111011101111001110100;
src2.bits[1] = 0b11111110010110110111101101110010;
src2.bits[2] = 0b10010011011111001111111010010011;
src2.bits[3] = 0b00000000000101010000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_32
s21_decimal src1, src2;
int origin;
// src1 = -776890.75455454213415678965898;
// src2 = -7.7545545454546589781677545545;
src1.bits[0] = 0b11000010010111101111100010001010;
src1.bits[1] = 0b01011100000101000111000011011000;
src1.bits[2] = 0b11111011000001101110010110100011;
src1.bits[3] = 0b10000000000101110000000000000000;
src2.bits[0] = 0b00000101101101111001100001001001;
src2.bits[1] = 0b01101011011011011010110110010010;
src2.bits[2] = 0b11111010100100000010101111111010;
src2.bits[3] = 0b10000000000111000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_33
s21_decimal src1, src2;
int origin;
// src1 = -732123534337593543950335.12;
// src2 = -792281625.14264337593543950335;
src1.bits[0] = 0b11000011000110111111111110101000;
src1.bits[1] = 0b10100001110111010100101100101110;
src1.bits[2] = 0b00000000001111001000111101010001;
src1.bits[3] = 0b10000000000000100000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b10000000000101000000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_34
s21_decimal src1, src2;
int origin;
// src1 = 675432788976.5424354657687;
// src2 = 67543278.89765424354657687;
src1.bits[0] = 0b10111110000100011000010110010111;
src1.bits[1] = 0b11011001001111010001001011000110;
src1.bits[2] = 0b00000000000001011001011001001000;
src1.bits[3] = 0b00000000000011010000000000000000;
src2.bits[0] = 0b10111110000100011000010110010111;
src2.bits[1] = 0b11011001001111010001001011000110;
src2.bits[2] = 0b00000000000001011001011001001000;
src2.bits[3] = 0b00000000000100010000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_greater_or_equal_35
s21_decimal src1, src2;
int origin;
// src1 = -579895323215489956.67897455465;
// src2 = -579895323215489956.67897455465;
src1.bits[0] = 0b11100110001001011001001101101001;
src1.bits[1] = 0b00111000110110101110001010110100;
src1.bits[2] = 0b10111011010111111101000100011110;
src1.bits[3] = 0b10000000000010110000000000000000;
src2.bits[0] = 0b11100110001001011001001101101001;
src2.bits[1] = 0b00111000110110101110001010110100;
src2.bits[2] = 0b10111011010111111101000100011110;
src2.bits[3] = 0b10000000000010110000000000000000;
int result = s21_is_greater_or_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_equal_1
  s21_decimal src1, src2;
  int origin;
  // src1 = 2;
  // src2 = 2;
  src1.bits[0] = 0b00000000000000000000000000000010;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000010;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int result = s21_is_equal(src1, src2);
  origin = 1;
  ck_assert_int_eq(origin, result);

#test s21_equal_2
  s21_decimal src1, src2;
  int origin;
  // src1 = 2;
  // src2 = 2.00;
  src1.bits[0] = 0b00000000000000000000000000000010;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000011001000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000100000000000000000;
  int result = s21_is_equal(src1, src2);
  origin = 1;
  ck_assert_int_eq(origin, result);

#test s21_equal_3
  s21_decimal src1, src2;
  int origin;
  // src1 = 2;
  // src2 = 3;
  src1.bits[0] = 0b00000000000000000000000000000010;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int result = s21_is_equal(src1, src2);
  origin = 0;
  ck_assert_int_eq(origin, result);

#test s21_equal_4
  s21_decimal src1, src2;
  int origin;
  // src1 = 0.000000000000000000000000000;
  // src2 = 0;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000110110000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int result = s21_is_equal(src1, src2);
  origin = 1;
  ck_assert_int_eq(origin, result);

#test s21_equal_5
  s21_decimal src1, src2;
  int origin;
  // src1 = -3;
  // src2 = 3;
  src1.bits[0] = 0b00000000000000000000000000000011;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b10000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int result = s21_is_equal(src1, src2);
  origin = 0;
  ck_assert_int_eq(origin, result);

#test s21_equal_6
  s21_decimal src1, src2;
  int origin;
  // src1 = 2.222212;
  // src2 = 2.222212;
  src1.bits[0] = 0b00000000001000011110100010000100;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000001100000000000000000;
  src2.bits[0] = 0b00000000001000011110100010000100;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000001100000000000000000;
  int result = s21_is_equal(src1, src2);
  origin = 1;
  ck_assert_int_eq(origin, result);

#test s21_equal_7
  s21_decimal src1, src2;
  int origin;
  // src1 = 2.22221200000000000;
  // src2 = 2.222212;
  src1.bits[0] = 0b00000111100011111010000000000000;
  src1.bits[1] = 0b00000011000101010111110100000001;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000100010000000000000000;
  src2.bits[0] = 0b00000000001000011110100010000100;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000001100000000000000000;
  int result = s21_is_equal(src1, src2);
  origin = 1;
  ck_assert_int_eq(origin, result);

#test s21_equal_8
  s21_decimal src1, src2;
  int origin;
  // src1 = 3.2222121;
  // src2 = 3.222212;
  src1.bits[0] = 0b00000001111010111010101110101001;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000001110000000000000000;
  src2.bits[0] = 0b00000000001100010010101011000100;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000001100000000000000000;
  int result = s21_is_equal(src1, src2);
  origin = 0;
  ck_assert_int_eq(origin, result);

#test s21_equal_9
  s21_decimal src1, src2;
  int origin;
  // src1 = 2.222212;
  // src2 = -2.222212;
  src1.bits[0] = 0b00000000001000011110100010000100;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000001100000000000000000;
  src2.bits[0] = 0b00000000001000011110100010000100;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000001100000000000000000;
  int result = s21_is_equal(src1, src2);
  origin = 0;
  ck_assert_int_eq(origin, result);

#test s21_equal_10
  s21_decimal src1, src2;
  int origin;
  // src1 = -364748;
  // src2 = 1;
  src1.bits[0] = 0b00000000000001011001000011001100;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b10000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int result = s21_is_equal(src1, src2);
  origin = 0;
  ck_assert_int_eq(origin, result);

#test s21_equal_11
  s21_decimal src1, src2;
  int origin;
  // src1 = 987456543210.0;
  // src2 = 98745654321.0;
  src1.bits[0] = 0b00011001111101110000001100100100;
  src1.bits[1] = 0b00000000000000000000100011111011;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000010000000000000000;
  src2.bits[0] = 0b11101000111111110001100111101010;
  src2.bits[1] = 0b00000000000000000000000011100101;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000010000000000000000;
  int result = s21_is_equal(src1, src2);
  origin = 0;
  ck_assert_int_eq(origin, result);

#test s21_equal_12
  s21_decimal src1, src2;
  int origin;
  // src1 = -9878798789.5867800;
  // src2 = -9878798789.58678;
  src1.bits[0] = 0b11001110100110111101100110011000;
  src1.bits[1] = 0b00000001010111101111011100100110;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b10000000000001110000000000000000;
  src2.bits[0] = 0b10110101010001000001111001010110;
  src2.bits[1] = 0b00000000000000111000001001111000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000001010000000000000000;
  int result = s21_is_equal(src1, src2);
  origin = 1;
  ck_assert_int_eq(origin, result);

#test s21_equal_13
  s21_decimal src1, src2;
  int origin;
  // src1 = 9999999999999999999;
  // src2 = 1;
  src1.bits[0] = 0b10001001111001111111111111111111;
  src1.bits[1] = 0b10001010110001110010001100000100;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int result = s21_is_equal(src1, src2);
  origin = 0;
  ck_assert_int_eq(origin, result);

#test s21_equal_14
  s21_decimal src1, src2;
  int origin;
  // src1 = 18446744073709551615;
  // src2 = 18446744073709551615.000000000;
  src1.bits[0] = 0b11111111111111111111111111111111;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b11000100011001010011011000000000;
  src2.bits[1] = 0b11111111111111111111111111111111;
  src2.bits[2] = 0b00111011100110101100100111111111;
  src2.bits[3] = 0b00000000000010010000000000000000;
  int result = s21_is_equal(src1, src2);
  origin = 1;
  ck_assert_int_eq(origin, result);

#test s21_equal_15
  s21_decimal src1, src2;
  int origin;
  // src1 = 18446744073709551615.0;
  // src2 = 965453154;
  src1.bits[0] = 0b11111111111111111111111111110110;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b00000000000000000000000000001001;
  src1.bits[3] = 0b00000000000000010000000000000000;
  src2.bits[0] = 0b00111001100010111010010101100010;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int result = s21_is_equal(src1, src2);
  origin = 0;
  ck_assert_int_eq(origin, result);

#test s21_equal_16
  s21_decimal src1, src2;
  int origin;
  // src1 = -545454512454545.35265454545645;
  // src2 = -545454512454545.35265454545645;
  src1.bits[0] = 0b10000010111000100101101011101101;
  src1.bits[1] = 0b11111001111010000010010110101101;
  src1.bits[2] = 0b10110000001111101111000010010100;
  src1.bits[3] = 0b10000000000011100000000000000000;
  src2.bits[0] = 0b10000010111000100101101011101101;
  src2.bits[1] = 0b11111001111010000010010110101101;
  src2.bits[2] = 0b10110000001111101111000010010100;
  src2.bits[3] = 0b10000000000011100000000000000000;
  int result = s21_is_equal(src1, src2);
  origin = 1;
  ck_assert_int_eq(origin, result);

#test s21_equal_17
  s21_decimal src1, src2;
  int origin;
  // src1 = -545454512454545.35265454545645;
  // src2 = -5.352654545456454545645464;
  src1.bits[0] = 0b10000010111000100101101011101101;
  src1.bits[1] = 0b11111001111010000010010110101101;
  src1.bits[2] = 0b10110000001111101111000010010100;
  src1.bits[3] = 0b10000000000011100000000000000000;
  src2.bits[0] = 0b01001000000110110001111110011000;
  src2.bits[1] = 0b11111011111111011000100101101101;
  src2.bits[2] = 0b00000000000001000110110101110111;
  src2.bits[3] = 0b10000000000110000000000000000000;
  int result = s21_is_equal(src1, src2);
  origin = 0;
  ck_assert_int_eq(origin, result);

#test s21_equal_18
s21_decimal src1, src2;
int origin;
// src1 = 7961327845421.879754123131254;
// src2 = 7961327.845421879754123131254;
src1.bits[0] = 0b01001110111001000011100101110110;
src1.bits[1] = 0b01001011001101011010000111011001;
src1.bits[2] = 0b00011001101110010111010010111111;
src1.bits[3] = 0b00000000000011110000000000000000;
src2.bits[0] = 0b01001110111001000011100101110110;
src2.bits[1] = 0b01001011001101011010000111011001;
src2.bits[2] = 0b00011001101110010111010010111111;
src2.bits[3] = 0b00000000000101010000000000000000;
int result = s21_is_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_equal_19
  s21_decimal src1, src2;
  int origin;
  // src1 = 12345677.987654345678987654346;
  // src2 = 12345677.987654000000000000000;
  src1.bits[0] = 0b10010001000010101111010011001010;
  src1.bits[1] = 0b11000000010001011101010111110010;
  src1.bits[2] = 0b00100111111001000001101100000000;
  src1.bits[3] = 0b00000000000101010000000000000000;
  src2.bits[0] = 0b11100111110001110000000000000000;
  src2.bits[1] = 0b11000000010001001001101110001101;
  src2.bits[2] = 0b00100111111001000001101100000000;
  src2.bits[3] = 0b00000000000101010000000000000000;
  int result = s21_is_equal(src1, src2);
  origin = 0;
  ck_assert_int_eq(origin, result);

#test s21_equal_20
s21_decimal src1, src2;
int origin;
// src1 = -12345677.987654345678987654346;
// src2 = 87654323456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b10000000000101010000000000000000;
src2.bits[0] = 0b00010001110011011101000110000101;
src2.bits[1] = 0b11110101101111000110111111000000;
src2.bits[2] = 0b00000010110101010000111100111111;
src2.bits[3] = 0b00000000000100000000000000000000;
int result = s21_is_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_equal_21
  s21_decimal src1, src2;
  int origin;
  // src1 = -87654323456.98765456789876530;
  // src2 = -87654323456.98765456789876531;
  src1.bits[0] = 0b10110010000010100010111100110010;
  src1.bits[1] = 0b10011001010111000101110110000000;
  src1.bits[2] = 0b00011100010100101001100001111111;
  src1.bits[3] = 0b10000000000100010000000000000000;
  src2.bits[0] = 0b10110010000010100010111100110011;
  src2.bits[1] = 0b10011001010111000101110110000000;
  src2.bits[2] = 0b00011100010100101001100001111111;
  src2.bits[3] = 0b10000000000100010000000000000000;
  int result = s21_is_equal(src1, src2);
  origin = 0;
  ck_assert_int_eq(origin, result);

#test s21_equal_22
s21_decimal src1, src2;
int origin;
// src1 = -87654323456.98765456789876530;
// src2 = -87654323456.98765456789876530;
src1.bits[0] = 0b10110010000010100010111100110010;
src1.bits[1] = 0b10011001010111000101110110000000;
src1.bits[2] = 0b00011100010100101001100001111111;
src1.bits[3] = 0b10000000000100010000000000000000;
src2.bits[0] = 0b10110010000010100010111100110010;
src2.bits[1] = 0b10011001010111000101110110000000;
src2.bits[2] = 0b00011100010100101001100001111111;
src2.bits[3] = 0b10000000000100010000000000000000;
int result = s21_is_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_equal_23
s21_decimal src1, src2;
int origin;
// src1 = 0.0;
// src2 = 0.69;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00000000000000000000000001000101;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_equal_24
s21_decimal src1, src2;
int origin;
// src1 = -69.1234567;
// src2 = -69.12345670000000;
src1.bits[0] = 0b00101001001100110110011100000111;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000001110000000000000000;
src2.bits[0] = 0b11100100001110011001110110000000;
src2.bits[1] = 0b00000000000110001000111010111101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000011100000000000000000;
int result = s21_is_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_equal_25
s21_decimal src1, src2;
int origin;
// src1 = 13436577854.000000000000;
// src2 = 13436577854;
src1.bits[0] = 0b00100110011110011110000000000000;
src1.bits[1] = 0b01100101111110011111000000101100;
src1.bits[2] = 0b00000000000000000000001011011000;
src1.bits[3] = 0b00000000000011000000000000000000;
src2.bits[0] = 0b00100000111000011110100000111110;
src2.bits[1] = 0b00000000000000000000000000000011;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_equal_26
s21_decimal src1, src2;
int origin;
// src1 = 79228162514264337593543950335;
// src2 = 79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_equal_27
s21_decimal src1, src2;
int origin;
// src1 = 79228162514264337593543950335;
// src2 = -79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11111111111111111111111111111111;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b11111111111111111111111111111111;
src2.bits[3] = 0b10000000000000000000000000000000;
int result = s21_is_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);


#test s21_is_not_equal_1
s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 2;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_is_not_equal_2
s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 2.00;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000011001000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000100000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_is_not_equal_3
s21_decimal src1, src2;
int origin;
// src1 = 2;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_is_not_equal_4
s21_decimal src1, src2;
int origin;
// src1 = 0.000000000000000000000000000;
// src2 = 0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000110110000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_is_not_equal_5
s21_decimal src1, src2;
int origin;
// src1 = -3;
// src2 = 3;
src1.bits[0] = 0b00000000000000000000000000000011;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_is_not_equal_6
s21_decimal src1, src2;
int origin;
// src1 = 2.222212;
// src2 = 2.222212;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
src2.bits[0] = 0b00000000001000011110100010000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_is_not_equal_7
s21_decimal src1, src2;
int origin;
// src1 = 2.22221200000000000;
// src2 = 2.222212;
src1.bits[0] = 0b00000111100011111010000000000000;
src1.bits[1] = 0b00000011000101010111110100000001;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000100010000000000000000;
src2.bits[0] = 0b00000000001000011110100010000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_is_not_equal_8
s21_decimal src1, src2;
int origin;
// src1 = 3.2222121;
// src2 = 3.222212;
src1.bits[0] = 0b00000001111010111010101110101001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001110000000000000000;
src2.bits[0] = 0b00000000001100010010101011000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000001100000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_is_not_equal_9
s21_decimal src1, src2;
int origin;
// src1 = 2.222212;
// src2 = -2.222212;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
src2.bits[0] = 0b00000000001000011110100010000100;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000001100000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_is_not_equal_10
s21_decimal src1, src2;
int origin;
// src1 = -364748;
// src2 = 1;
src1.bits[0] = 0b00000000000001011001000011001100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_is_not_equal_11
s21_decimal src1, src2;
int origin;
// src1 = 987456543210.0;
// src2 = 98745654321.0;
src1.bits[0] = 0b00011001111101110000001100100100;
src1.bits[1] = 0b00000000000000000000100011111011;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b11101000111111110001100111101010;
src2.bits[1] = 0b00000000000000000000000011100101;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000010000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_is_not_equal_12
s21_decimal src1, src2;
int origin;
// src1 = -9878798789.5867800;
// src2 = -9878798789.58678;
src1.bits[0] = 0b11001110100110111101100110011000;
src1.bits[1] = 0b00000001010111101111011100100110;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000001110000000000000000;
src2.bits[0] = 0b10110101010001000001111001010110;
src2.bits[1] = 0b00000000000000111000001001111000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b10000000000001010000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_is_not_equal_13
s21_decimal src1, src2;
int origin;
// src1 = 9999999999999999999;
// src2 = 1;
src1.bits[0] = 0b10001001111001111111111111111111;
src1.bits[1] = 0b10001010110001110010001100000100;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000001;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_is_not_equal_14
s21_decimal src1, src2;
int origin;
// src1 = 18446744073709551615;
// src2 = 18446744073709551615.000000000;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b11000100011001010011011000000000;
src2.bits[1] = 0b11111111111111111111111111111111;
src2.bits[2] = 0b00111011100110101100100111111111;
src2.bits[3] = 0b00000000000010010000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_is_not_equal_15
s21_decimal src1, src2;
int origin;
// src1 = 18446744073709551615.0;
// src2 = 965453154;
src1.bits[0] = 0b11111111111111111111111111110110;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000001001;
src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00111001100010111010010101100010;
src2.bits[1] = 0b00000000000000000000000000000000;
src2.bits[2] = 0b00000000000000000000000000000000;
src2.bits[3] = 0b00000000000000000000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_is_not_equal_16
s21_decimal src1, src2;
int origin;
// src1 = -545454512454545.35265454545645;
// src2 = -545454512454545.35265454545645;
src1.bits[0] = 0b10000010111000100101101011101101;
src1.bits[1] = 0b11111001111010000010010110101101;
src1.bits[2] = 0b10110000001111101111000010010100;
src1.bits[3] = 0b10000000000011100000000000000000;
src2.bits[0] = 0b10000010111000100101101011101101;
src2.bits[1] = 0b11111001111010000010010110101101;
src2.bits[2] = 0b10110000001111101111000010010100;
src2.bits[3] = 0b10000000000011100000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 0;
ck_assert_int_eq(origin, result);

#test s21_is_not_equal_17
s21_decimal src1, src2;
int origin;
// src1 = -545454512454545.35265454545645;
// src2 = -5.352654545456454545645464;
src1.bits[0] = 0b10000010111000100101101011101101;
src1.bits[1] = 0b11111001111010000010010110101101;
src1.bits[2] = 0b10110000001111101111000010010100;
src1.bits[3] = 0b10000000000011100000000000000000;
src2.bits[0] = 0b01001000000110110001111110011000;
src2.bits[1] = 0b11111011111111011000100101101101;
src2.bits[2] = 0b00000000000001000110110101110111;
src2.bits[3] = 0b10000000000110000000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_is_not_equal_18
s21_decimal src1, src2;
int origin;
// src1 = 7961327845421.879754123131254;
// src2 = 7961327.845421879754123131254;
src1.bits[0] = 0b01001110111001000011100101110110;
src1.bits[1] = 0b01001011001101011010000111011001;
src1.bits[2] = 0b00011001101110010111010010111111;
src1.bits[3] = 0b00000000000011110000000000000000;
src2.bits[0] = 0b01001110111001000011100101110110;
src2.bits[1] = 0b01001011001101011010000111011001;
src2.bits[2] = 0b00011001101110010111010010111111;
src2.bits[3] = 0b00000000000101010000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_is_not_equal_19
s21_decimal src1, src2;
int origin;
// src1 = 12345677.987654345678987654346;
// src2 = 12345677.987654000000000000000;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b00000000000101010000000000000000;
src2.bits[0] = 0b11100111110001110000000000000000;
src2.bits[1] = 0b11000000010001001001101110001101;
src2.bits[2] = 0b00100111111001000001101100000000;
src2.bits[3] = 0b00000000000101010000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_is_not_equal_20
s21_decimal src1, src2;
int origin;
// src1 = -12345677.987654345678987654346;
// src2 = 87654323456.9876545678987653;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b10000000000101010000000000000000;
src2.bits[0] = 0b00010001110011011101000110000101;
src2.bits[1] = 0b11110101101111000110111111000000;
src2.bits[2] = 0b00000010110101010000111100111111;
src2.bits[3] = 0b00000000000100000000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_is_not_equal_21
s21_decimal src1, src2;
int origin;
// src1 = -87654323456.98765456789876530;
// src2 = -87654323456.98765456789876531;
src1.bits[0] = 0b10110010000010100010111100110010;
src1.bits[1] = 0b10011001010111000101110110000000;
src1.bits[2] = 0b00011100010100101001100001111111;
src1.bits[3] = 0b10000000000100010000000000000000;
src2.bits[0] = 0b10110010000010100010111100110011;
src2.bits[1] = 0b10011001010111000101110110000000;
src2.bits[2] = 0b00011100010100101001100001111111;
src2.bits[3] = 0b10000000000100010000000000000000;
int result = s21_is_not_equal(src1, src2);
origin = 1;
ck_assert_int_eq(origin, result);

#test s21_negate_1
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = 2.1234;
src1.bits[0] = 0b00000000000000000101001011110010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001000000000000000000;
// origin = -2.1234;
origin.bits[0] = 0b00000000000000000101001011110010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000001000000000000000000;
int err = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_negate_2
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = 457.000001;
src1.bits[0] = 0b00011011001111010100010001000001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
// origin = -457.000001;
origin.bits[0] = 0b00011011001111010100010001000001;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000001100000000000000000;
int err = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_negate_3
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = 2.000;
src1.bits[0] = 0b00000000000000000000011111010000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000110000000000000000;
// origin = -2.000;
origin.bits[0] = 0b00000000000000000000011111010000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000110000000000000000;
int err = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_negate_4
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = -0.000000000000000000000000000;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000110110000000000000000;
// origin = 0.000000000000000000000000000;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000110110000000000000000;
int err = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_negate_5
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = -3;
src1.bits[0] = 0b00000000000000000000000000000011;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
// origin = 3;
origin.bits[0] = 0b00000000000000000000000000000011;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int err = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);


#test s21_negate_6
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = 2.222212;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
// origin = -2.222212;
origin.bits[0] = 0b00000000001000011110100010000100;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000001100000000000000000;
int err = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_negate_7
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = 2.22221200000001000;
src1.bits[0] = 0b00000111100011111010001111101000;
src1.bits[1] = 0b00000011000101010111110100000001;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000100010000000000000000;
// origin = -2.22221200000001000;
origin.bits[0] = 0b00000111100011111010001111101000;
origin.bits[1] = 0b00000011000101010111110100000001;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000100010000000000000000;
int err = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_negate_8
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = 3.745754741;
src1.bits[0] = 0b11011111010000111010111001110101;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000010010000000000000000;
// origin = -3.745754741;
origin.bits[0] = 0b11011111010000111010111001110101;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000010010000000000000000;
int err = s21_negate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);



#test s21_truncate_1
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = 2.1234;
src1.bits[0] = 0b00000000000000000101001011110010;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001000000000000000000;
// origin = 2;
origin.bits[0] = 0b00000000000000000000000000000010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int err = s21_truncate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_truncate_2
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = 457.000001;
src1.bits[0] = 0b00011011001111010100010001000001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
// origin = 457;
origin.bits[0] = 0b00000000000000000000000111001001;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int err = s21_truncate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_truncate_3
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = 2.000;
src1.bits[0] = 0b00000000000000000000011111010000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000110000000000000000;
// origin = 2;
origin.bits[0] = 0b00000000000000000000000000000010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int err = s21_truncate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);


#test s21_truncate_5
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = -3;
src1.bits[0] = 0b00000000000000000000000000000011;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
// origin = -3;
origin.bits[0] = 0b00000000000000000000000000000011;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
int err = s21_truncate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_truncate_6
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = 2.222212;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
// origin = 2;
origin.bits[0] = 0b00000000000000000000000000000010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int err = s21_truncate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_truncate_7
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = 2.22221200000001000;
src1.bits[0] = 0b00000111100011111010001111101000;
src1.bits[1] = 0b00000011000101010111110100000001;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000100010000000000000000;
// origin = 2;
origin.bits[0] = 0b00000000000000000000000000000010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int err = s21_truncate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_truncate_8
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = 3.745754741;
src1.bits[0] = 0b11011111010000111010111001110101;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000010010000000000000000;
// origin = 3;
origin.bits[0] = 0b00000000000000000000000000000011;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int err = s21_truncate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_truncate_9
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = 2.222212;
src1.bits[0] = 0b00000000001000011110100010000100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000001100000000000000000;
// origin = 2;
origin.bits[0] = 0b00000000000000000000000000000010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int err = s21_truncate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_truncate_10
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = -364748;
src1.bits[0] = 0b00000000000001011001000011001100;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000000000000000000000000;
// origin = -364748;
origin.bits[0] = 0b00000000000001011001000011001100;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
int err = s21_truncate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_truncate_11
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = 987456543210.0;
src1.bits[0] = 0b00011001111101110000001100100100;
src1.bits[1] = 0b00000000000000000000100011111011;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
// origin = 987456543210;
origin.bits[0] = 0b11101000111111110001100111101010;
origin.bits[1] = 0b00000000000000000000000011100101;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int err = s21_truncate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_truncate_12
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = -9878798789.5867800;
src1.bits[0] = 0b11001110100110111101100110011000;
src1.bits[1] = 0b00000001010111101111011100100110;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000001110000000000000000;
// origin = -9878798789;
origin.bits[0] = 0b01001100110100101000000111000101;
origin.bits[1] = 0b00000000000000000000000000000010;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
int err = s21_truncate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_truncate_13
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = 9999999999999999999;
src1.bits[0] = 0b10001001111001111111111111111111;
src1.bits[1] = 0b10001010110001110010001100000100;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
// origin = 9999999999999999999;
origin.bits[0] = 0b10001001111001111111111111111111;
origin.bits[1] = 0b10001010110001110010001100000100;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int err = s21_truncate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_truncate_14
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = 18446744073709551615;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
// origin = 18446744073709551615;
origin.bits[0] = 0b11111111111111111111111111111111;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int err = s21_truncate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_truncate_15
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = 18446744073709551615.0;
src1.bits[0] = 0b11111111111111111111111111110110;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b00000000000000000000000000001001;
src1.bits[3] = 0b00000000000000010000000000000000;
// origin = 18446744073709551615;
origin.bits[0] = 0b11111111111111111111111111111111;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int err = s21_truncate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_truncate_16
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = -796214545.3526545454564545456;
src1.bits[0] = 0b10111111111111101001001110110000;
src1.bits[1] = 0b11101010111111101111100111101000;
src1.bits[2] = 0b00011001101110100010000111100001;
src1.bits[3] = 0b10000000000100110000000000000000;
// origin = -796214545;
origin.bits[0] = 0b00101111011101010100010100010001;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
int err = s21_truncate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_truncate_17
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = -545454512454545.35265454545645;
src1.bits[0] = 0b10000010111000100101101011101101;
src1.bits[1] = 0b11111001111010000010010110101101;
src1.bits[2] = 0b10110000001111101111000010010100;
src1.bits[3] = 0b10000000000011100000000000000000;
// origin = -545454512454545;
origin.bits[0] = 0b10000110011101001011101110010001;
origin.bits[1] = 0b00000000000000011111000000010110;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
int err = s21_truncate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_truncate_18
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = -7961327845421.843434341378545;
src1.bits[0] = 0b11110011001100111010100111110001;
src1.bits[1] = 0b01001011001101011000000011010000;
src1.bits[2] = 0b00011001101110010111010010111111;
src1.bits[3] = 0b10000000000011110000000000000000;
// origin = -7961327845421;
origin.bits[0] = 0b10100100000111100100000000101101;
origin.bits[1] = 0b00000000000000000000011100111101;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
int err = s21_truncate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_truncate_19
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = 12345677.987654345678987654346;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b00000000000101010000000000000000;
// origin = 12345677;
origin.bits[0] = 0b00000000101111000110000101001101;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int err = s21_truncate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_truncate_20
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = 12345677.987654345678987654346;
src1.bits[0] = 0b10010001000010101111010011001010;
src1.bits[1] = 0b11000000010001011101010111110010;
src1.bits[2] = 0b00100111111001000001101100000000;
src1.bits[3] = 0b00000000000101010000000000000000;
// origin = 12345677;
origin.bits[0] = 0b00000000101111000110000101001101;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int err = s21_truncate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_truncate_21
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = 87654323456.98765456789876530;
src1.bits[0] = 0b10110010000010100010111100110010;
src1.bits[1] = 0b10011001010111000101110110000000;
src1.bits[2] = 0b00011100010100101001100001111111;
src1.bits[3] = 0b00000000000100010000000000000000;
// origin = 87654323456;
origin.bits[0] = 0b01101000100110101101010100000000;
origin.bits[1] = 0b00000000000000000000000000010100;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int err = s21_truncate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_truncate_22
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = -854764561465456456.9876545679;
src1.bits[0] = 0b11000100000001000100000010001111;
src1.bits[1] = 0b01000000100100100110001100010101;
src1.bits[2] = 0b00011011100111100111001001011101;
src1.bits[3] = 0b10000000000010100000000000000000;
// origin = -854764561465456456;
origin.bits[0] = 0b00000100101111011011011101001000;
origin.bits[1] = 0b00001011110111001011101111010111;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
int err = s21_truncate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_truncate_23
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = 0.0;
src1.bits[0] = 0b00000000000000000000000000000000;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000010000000000000000;
// origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int err = s21_truncate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_truncate_24
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = -69.1234567;
src1.bits[0] = 0b00101001001100110110011100000111;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b10000000000001110000000000000000;
// origin = -69;
origin.bits[0] = 0b00000000000000000000000001000101;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
int err = s21_truncate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_truncate_26
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = 13436577854.000000000000;
src1.bits[0] = 0b00100110011110011110000000000000;
src1.bits[1] = 0b01100101111110011111000000101100;
src1.bits[2] = 0b00000000000000000000001011011000;
src1.bits[3] = 0b00000000000011000000000000000000;
// origin = 13436577854;
origin.bits[0] = 0b00100000111000011110100000111110;
origin.bits[1] = 0b00000000000000000000000000000011;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int err = s21_truncate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_truncate_27
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = 79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
// origin = 79228162514264337593543950335;
origin.bits[0] = 0b11111111111111111111111111111111;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b11111111111111111111111111111111;
origin.bits[3] = 0b00000000000000000000000000000000;
int err = s21_truncate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_truncate_28
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = 79228162514264337593543950335;
src1.bits[0] = 0b11111111111111111111111111111111;
src1.bits[1] = 0b11111111111111111111111111111111;
src1.bits[2] = 0b11111111111111111111111111111111;
src1.bits[3] = 0b00000000000000000000000000000000;
// origin = 79228162514264337593543950335;
origin.bits[0] = 0b11111111111111111111111111111111;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b11111111111111111111111111111111;
origin.bits[3] = 0b00000000000000000000000000000000;
int err = s21_truncate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_truncate_29
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = 665464545;
src1.bits[0] = 0b00100111101010100010111011100001;
src1.bits[1] = 0b00000000000000000000000000000000;
src1.bits[2] = 0b00000000000000000000000000000000;
src1.bits[3] = 0b00000000000000000000000000000000;
// origin = 665464545;
origin.bits[0] = 0b00100111101010100010111011100001;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int err = s21_truncate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_truncate_30
s21_decimal src1, origin, result;
int originerr = 0;
// src1 = 2.7986531268974139743;
src1.bits[0] = 0b11111110100100001101100101011111;
src1.bits[1] = 0b10000100011001000010000111101000;
src1.bits[2] = 0b00000000000000000000000000000001;
src1.bits[3] = 0b00000000000100110000000000000000;
// origin = 2;
origin.bits[0] = 0b00000000000000000000000000000010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
int err = s21_truncate(src1, &result);
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_round_1
s21_decimal src, origin, result;
int originerr = 0;
// src = 5.0;
src.bits[0] = 0b00000000000000000000000000110010;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b00000000000000010000000000000000;
int err = s21_round(src, &result);
// origin = 5;
origin.bits[0] = 0b00000000000000000000000000000101;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_round_2
s21_decimal src, origin, result;
int originerr = 0;
// src = 3.4;
src.bits[0] = 0b00000000000000000000000000100010;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b00000000000000010000000000000000;
int err = s21_round(src, &result);
// origin = 3;
origin.bits[0] = 0b00000000000000000000000000000011;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_round_3
s21_decimal src, origin, result;
int originerr = 0;
// src = 0.0;
src.bits[0] = 0b00000000000000000000000000000000;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b00000000000000010000000000000000;
int err = s21_round(src, &result);
// origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_round_4
s21_decimal src, origin, result;
int originerr = 0;
// src = -2.4363463;
src.bits[0] = 0b00000001011100111100000111000111;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b10000000000001110000000000000000;
int err = s21_round(src, &result);
// origin = -2;
origin.bits[0] = 0b00000000000000000000000000000010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);


#test s21_round_6
s21_decimal src, origin, result;
int originerr = 0;
// src = -0.45;
src.bits[0] = 0b00000000000000000000000000101101;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b10000000000000100000000000000000;
int err = s21_round(src, &result);
// origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_round_7
s21_decimal src, origin, result;
int originerr = 0;
// src = 652.34631;
src.bits[0] = 0b00000011111000110110011011000111;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b00000000000001010000000000000000;
int err = s21_round(src, &result);
// origin = 652;
origin.bits[0] = 0b00000000000000000000001010001100;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_round_8
s21_decimal src, origin, result;
int originerr = 0;
// src = 4.97623323;
src.bits[0] = 0b00011101101010010010000100011011;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b00000000000010000000000000000000;
int err = s21_round(src, &result);
// origin = 5;
origin.bits[0] = 0b00000000000000000000000000000101;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_round_9
s21_decimal src, origin, result;
int originerr = 0;
// src = 65658654.59;
src.bits[0] = 0b10000111010110110010011111110011;
src.bits[1] = 0b00000000000000000000000000000001;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b00000000000000100000000000000000;
int err = s21_round(src, &result);
// origin = 65658655;
origin.bits[0] = 0b00000011111010011101111100011111;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_round_10
s21_decimal src, origin, result;
int originerr = 0;
// src = -364748.110;
src.bits[0] = 0b00010101101111011001110101001110;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b10000000000000110000000000000000;
int err = s21_round(src, &result);
// origin = -364748;
origin.bits[0] = 0b00000000000001011001000011001100;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_round_11
s21_decimal src, origin, result;
int originerr = 0;
// src = 1.9874565432111;
src.bits[0] = 0b01101000011010011010001100101111;
src.bits[1] = 0b00000000000000000001001000010011;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b00000000000011010000000000000000;
int err = s21_round(src, &result);
// origin = 2;
origin.bits[0] = 0b00000000000000000000000000000010;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_round_12
s21_decimal src, origin, result;
int originerr = 0;
// src = -98.78798789312;
src.bits[0] = 0b00010110010010101110101011000000;
src.bits[1] = 0b00000000000000000000100011111100;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b10000000000010110000000000000000;
int err = s21_round(src, &result);
// origin = -99;
origin.bits[0] = 0b00000000000000000000000001100011;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_round_13
s21_decimal src, origin, result;
int originerr = 0;
// src = 999999999999999999911.3;
src.bits[0] = 0b10110010001111111111110010001001;
src.bits[1] = 0b00011001111000001100100110111010;
src.bits[2] = 0b00000000000000000000001000011110;
src.bits[3] = 0b00000000000000010000000000000000;
int err = s21_round(src, &result);
// origin = 999999999999999999911;
origin.bits[0] = 0b11011110100111111111111110100111;
origin.bits[1] = 0b00110101110010011010110111000101;
origin.bits[2] = 0b00000000000000000000000000110110;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_round_14
s21_decimal src, origin, result;
int originerr = 0;
// src = -545454512454545.35265454545645;
src.bits[0] = 0b10000010111000100101101011101101;
src.bits[1] = 0b11111001111010000010010110101101;
src.bits[2] = 0b10110000001111101111000010010100;
src.bits[3] = 0b10000000000011100000000000000000;
int err = s21_round(src, &result);
// origin = -545454512454545;
origin.bits[0] = 0b10000110011101001011101110010001;
origin.bits[1] = 0b00000000000000011111000000010110;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_round_15
s21_decimal src, origin, result;
int originerr = 0;
// src = 545454512454545.35265454545645;
src.bits[0] = 0b10000010111000100101101011101101;
src.bits[1] = 0b11111001111010000010010110101101;
src.bits[2] = 0b10110000001111101111000010010100;
src.bits[3] = 0b00000000000011100000000000000000;
int err = s21_round(src, &result);
// origin = 545454512454545;
origin.bits[0] = 0b10000110011101001011101110010001;
origin.bits[1] = 0b00000000000000011111000000010110;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_round_16
s21_decimal src, origin, result;
int originerr = 0;
// src = 7961327845421.879754123131254;
src.bits[0] = 0b01001110111001000011100101110110;
src.bits[1] = 0b01001011001101011010000111011001;
src.bits[2] = 0b00011001101110010111010010111111;
src.bits[3] = 0b00000000000011110000000000000000;
int err = s21_round(src, &result);
// origin = 7961327845422;
origin.bits[0] = 0b10100100000111100100000000101110;
origin.bits[1] = 0b00000000000000000000011100111101;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_round_17
s21_decimal src, origin, result;
int originerr = 0;
// src = 12345677.987654345678987654346;
src.bits[0] = 0b10010001000010101111010011001010;
src.bits[1] = 0b11000000010001011101010111110010;
src.bits[2] = 0b00100111111001000001101100000000;
src.bits[3] = 0b00000000000101010000000000000000;
int err = s21_round(src, &result);
// origin = 12345678;
origin.bits[0] = 0b00000000101111000110000101001110;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_round_18
s21_decimal src, origin, result;
int originerr = 0;
// src = -12345677.987654345678987654346;
src.bits[0] = 0b10010001000010101111010011001010;
src.bits[1] = 0b11000000010001011101010111110010;
src.bits[2] = 0b00100111111001000001101100000000;
src.bits[3] = 0b10000000000101010000000000000000;
int err = s21_round(src, &result);
// origin = -12345678;
origin.bits[0] = 0b00000000101111000110000101001110;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_round_19
s21_decimal src, origin, result;
int originerr = 0;
// src = 87654323456.9876545678987653;
src.bits[0] = 0b00010001110011011101000110000101;
src.bits[1] = 0b11110101101111000110111111000000;
src.bits[2] = 0b00000010110101010000111100111111;
src.bits[3] = 0b00000000000100000000000000000000;
int err = s21_round(src, &result);
// origin = 87654323457;
origin.bits[0] = 0b01101000100110101101010100000001;
origin.bits[1] = 0b00000000000000000000000000010100;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_round_20
s21_decimal src, origin, result;
int originerr = 0;
// src = 336565445454313.859865545;
src.bits[0] = 0b00111110111111000101101111001001;
src.bits[1] = 0b00111111110101011110000010001011;
src.bits[2] = 0b00000000000000000100011101000101;
src.bits[3] = 0b00000000000010010000000000000000;
int err = s21_round(src, &result);
// origin = 336565445454314;
origin.bits[0] = 0b10111111110100011110100111101010;
origin.bits[1] = 0b00000000000000010011001000011010;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_round_21
s21_decimal src, origin, result;
int originerr = 0;
// src = -15456451234534;
src.bits[0] = 0b10111100010010010000101011100110;
src.bits[1] = 0b00000000000000000000111000001110;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b10000000000000000000000000000000;
int err = s21_round(src, &result);
// origin = -15456451234534;
origin.bits[0] = 0b10111100010010010000101011100110;
origin.bits[1] = 0b00000000000000000000111000001110;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_round_22
s21_decimal src, origin, result;
int originerr = 0;
// src = -0.42354543545;
src.bits[0] = 0b11011100100001110000101110111001;
src.bits[1] = 0b00000000000000000000000000001001;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b10000000000010110000000000000000;
int err = s21_round(src, &result);
// origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_round_23
s21_decimal src, origin, result;
int originerr = 0;
// src = 79228162514264337593543950335;
src.bits[0] = 0b11111111111111111111111111111111;
src.bits[1] = 0b11111111111111111111111111111111;
src.bits[2] = 0b11111111111111111111111111111111;
src.bits[3] = 0b00000000000000000000000000000000;
int err = s21_round(src, &result);
// origin = 79228162514264337593543950335;
origin.bits[0] = 0b11111111111111111111111111111111;
origin.bits[1] = 0b11111111111111111111111111111111;
origin.bits[2] = 0b11111111111111111111111111111111;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_round_24
s21_decimal src, origin, result;
int originerr = 0;
// src = 2.7986531268974139743;
src.bits[0] = 0b11111110100100001101100101011111;
src.bits[1] = 0b10000100011001000010000111101000;
src.bits[2] = 0b00000000000000000000000000000001;
src.bits[3] = 0b00000000000100110000000000000000;
int err = s21_round(src, &result);
// origin = 3;
origin.bits[0] = 0b00000000000000000000000000000011;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_floor_1
s21_decimal src, origin, result;
int originerr = 0;
// src = 5.0;
src.bits[0] = 0b00000000000000000000000000110010;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b00000000000000010000000000000000;
int err = s21_floor(src, &result);
// origin = 5;
origin.bits[0] = 0b00000000000000000000000000000101;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_floor_2
s21_decimal src, origin, result;
int originerr = 0;
// src = 3.4;
src.bits[0] = 0b00000000000000000000000000100010;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b00000000000000010000000000000000;
int err = s21_floor(src, &result);
// origin = 3;
origin.bits[0] = 0b00000000000000000000000000000011;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_floor_3
s21_decimal src, origin, result;
int originerr = 0;
// src = 0.0;
src.bits[0] = 0b00000000000000000000000000000000;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b00000000000000010000000000000000;
int err = s21_floor(src, &result);
// origin = 0;
origin.bits[0] = 0b00000000000000000000000000000000;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_floor_4
s21_decimal src, origin, result;
int originerr = 0;
// src = -2.4363463;
src.bits[0] = 0b00000001011100111100000111000111;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b10000000000001110000000000000000;
int err = s21_floor(src, &result);
// origin = -3;
origin.bits[0] = 0b00000000000000000000000000000011;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);


#test s21_floor_6
s21_decimal src, origin, result;
int originerr = 0;
// src = -0.45;
src.bits[0] = 0b00000000000000000000000000101101;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b10000000000000100000000000000000;
int err = s21_floor(src, &result);
// origin = -1;
origin.bits[0] = 0b00000000000000000000000000000001;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_floor_7
s21_decimal src, origin, result;
int originerr = 0;
// src = 652.34631;
src.bits[0] = 0b00000011111000110110011011000111;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b00000000000001010000000000000000;
int err = s21_floor(src, &result);
// origin = 652;
origin.bits[0] = 0b00000000000000000000001010001100;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_floor_8
s21_decimal src, origin, result;
int originerr = 0;
// src = 4.97623323;
src.bits[0] = 0b00011101101010010010000100011011;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b00000000000010000000000000000000;
int err = s21_floor(src, &result);
// origin = 4;
origin.bits[0] = 0b00000000000000000000000000000100;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_floor_9
s21_decimal src, origin, result;
int originerr = 0;
// src = 65658654.59;
src.bits[0] = 0b10000111010110110010011111110011;
src.bits[1] = 0b00000000000000000000000000000001;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b00000000000000100000000000000000;
int err = s21_floor(src, &result);
// origin = 65658654;
origin.bits[0] = 0b00000011111010011101111100011110;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_floor_10
s21_decimal src, origin, result;
int originerr = 0;
// src = -364748.110;
src.bits[0] = 0b00010101101111011001110101001110;
src.bits[1] = 0b00000000000000000000000000000000;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b10000000000000110000000000000000;
int err = s21_floor(src, &result);
// origin = -364749;
origin.bits[0] = 0b00000000000001011001000011001101;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_floor_11
s21_decimal src, origin, result;
int originerr = 0;
// src = 1.9874565432111;
src.bits[0] = 0b01101000011010011010001100101111;
src.bits[1] = 0b00000000000000000001001000010011;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b00000000000011010000000000000000;
int err = s21_floor(src, &result);
// origin = 1;
origin.bits[0] = 0b00000000000000000000000000000001;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_floor_12
s21_decimal src, origin, result;
int originerr = 0;
// src = -98.78798789312;
src.bits[0] = 0b00010110010010101110101011000000;
src.bits[1] = 0b00000000000000000000100011111100;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b10000000000010110000000000000000;
int err = s21_floor(src, &result);
// origin = -99;
origin.bits[0] = 0b00000000000000000000000001100011;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_floor_13
s21_decimal src, origin, result;
int originerr = 0;
// src = 999999999999999999911.3;
src.bits[0] = 0b10110010001111111111110010001001;
src.bits[1] = 0b00011001111000001100100110111010;
src.bits[2] = 0b00000000000000000000001000011110;
src.bits[3] = 0b00000000000000010000000000000000;
int err = s21_floor(src, &result);
// origin = 999999999999999999911;
origin.bits[0] = 0b11011110100111111111111110100111;
origin.bits[1] = 0b00110101110010011010110111000101;
origin.bits[2] = 0b00000000000000000000000000110110;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_floor_14
s21_decimal src, origin, result;
int originerr = 0;
// src = -545454512454545.35265454545645;
src.bits[0] = 0b10000010111000100101101011101101;
src.bits[1] = 0b11111001111010000010010110101101;
src.bits[2] = 0b10110000001111101111000010010100;
src.bits[3] = 0b10000000000011100000000000000000;
int err = s21_floor(src, &result);
// origin = -545454512454546;
origin.bits[0] = 0b10000110011101001011101110010010;
origin.bits[1] = 0b00000000000000011111000000010110;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_floor_15
s21_decimal src, origin, result;
int originerr = 0;
// src = 545454512454545.35265454545645;
src.bits[0] = 0b10000010111000100101101011101101;
src.bits[1] = 0b11111001111010000010010110101101;
src.bits[2] = 0b10110000001111101111000010010100;
src.bits[3] = 0b00000000000011100000000000000000;
int err = s21_floor(src, &result);
// origin = 545454512454545;
origin.bits[0] = 0b10000110011101001011101110010001;
origin.bits[1] = 0b00000000000000011111000000010110;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_floor_16
s21_decimal src, origin, result;
int originerr = 0;
// src = 7961327845421.879754123131254;
src.bits[0] = 0b01001110111001000011100101110110;
src.bits[1] = 0b01001011001101011010000111011001;
src.bits[2] = 0b00011001101110010111010010111111;
src.bits[3] = 0b00000000000011110000000000000000;
int err = s21_floor(src, &result);
// origin = 7961327845421;
origin.bits[0] = 0b10100100000111100100000000101101;
origin.bits[1] = 0b00000000000000000000011100111101;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_floor_17
s21_decimal src, origin, result;
int originerr = 0;
// src = 12345677.987654345678987654346;
src.bits[0] = 0b10010001000010101111010011001010;
src.bits[1] = 0b11000000010001011101010111110010;
src.bits[2] = 0b00100111111001000001101100000000;
src.bits[3] = 0b00000000000101010000000000000000;
int err = s21_floor(src, &result);
// origin = 12345677;
origin.bits[0] = 0b00000000101111000110000101001101;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_floor_18
s21_decimal src, origin, result;
int originerr = 0;
// src = -12345677.987654345678987654346;
src.bits[0] = 0b10010001000010101111010011001010;
src.bits[1] = 0b11000000010001011101010111110010;
src.bits[2] = 0b00100111111001000001101100000000;
src.bits[3] = 0b10000000000101010000000000000000;
int err = s21_floor(src, &result);
// origin = -12345678;
origin.bits[0] = 0b00000000101111000110000101001110;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_floor_19
s21_decimal src, origin, result;
int originerr = 0;
// src = 87654323456.9876545678987653;
src.bits[0] = 0b00010001110011011101000110000101;
src.bits[1] = 0b11110101101111000110111111000000;
src.bits[2] = 0b00000010110101010000111100111111;
src.bits[3] = 0b00000000000100000000000000000000;
int err = s21_floor(src, &result);
// origin = 87654323456;
origin.bits[0] = 0b01101000100110101101010100000000;
origin.bits[1] = 0b00000000000000000000000000010100;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_floor_20
s21_decimal src, origin, result;
int originerr = 0;
// src = 336565445454313.859865545;
src.bits[0] = 0b00111110111111000101101111001001;
src.bits[1] = 0b00111111110101011110000010001011;
src.bits[2] = 0b00000000000000000100011101000101;
src.bits[3] = 0b00000000000010010000000000000000;
int err = s21_floor(src, &result);
// origin = 336565445454313;
origin.bits[0] = 0b10111111110100011110100111101001;
origin.bits[1] = 0b00000000000000010011001000011010;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b00000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_floor_21
s21_decimal src, origin, result;
int originerr = 0;
// src = -15456451234534;
src.bits[0] = 0b10111100010010010000101011100110;
src.bits[1] = 0b00000000000000000000111000001110;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b10000000000000000000000000000000;
int err = s21_floor(src, &result);
// origin = -15456451234534;
origin.bits[0] = 0b10111100010010010000101011100110;
origin.bits[1] = 0b00000000000000000000111000001110;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);

#test s21_floor_23
s21_decimal src, origin, result;
int originerr = 0;
// src = -0.42354543545;
src.bits[0] = 0b11011100100001110000101110111001;
src.bits[1] = 0b00000000000000000000000000001001;
src.bits[2] = 0b00000000000000000000000000000000;
src.bits[3] = 0b10000000000010110000000000000000;
int err = s21_floor(src, &result);
// origin = -1;
origin.bits[0] = 0b00000000000000000000000000000001;
origin.bits[1] = 0b00000000000000000000000000000000;
origin.bits[2] = 0b00000000000000000000000000000000;
origin.bits[3] = 0b10000000000000000000000000000000;
ck_assert_int_eq(origin.bits[3], result.bits[3]);
ck_assert_int_eq(origin.bits[2], result.bits[2]);
ck_assert_int_eq(origin.bits[1], result.bits[1]);
ck_assert_int_eq(origin.bits[0], result.bits[0]);
ck_assert_int_eq(originerr, err);


#test s21_add_1
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 2;
  // src2 = 3;
  src1.bits[0] = 0b00000000000000000000000000000010;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_add(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000101;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);


#test s21_add_2
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 3;
  // src2 = 2;
  src1.bits[0] = 0b00000000000000000000000000000011;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000010;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_add(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000101;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

  #test s21_add_3
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 0;
  // src2 = 3;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_add(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000011;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_add_4
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 2;
  // src2 = 0;
  src1.bits[0] = 0b00000000000000000000000000000010;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_add(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000010;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_add_6
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -364748;
  // src2 = 1;
  src1.bits[0] = 0b00000000000001011001000011001100;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b10000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_add(src1, src2, &result);
  origin.bits[0] = 0b00000000000001011001000011001011;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_add_7
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 1;
  // src2 = 98745654321;
  src1.bits[0] = 0b00000000000000000000000000000001;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b11111101101100110001110000110001;
  src2.bits[1] = 0b00000000000000000000000000010110;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_add(src1, src2, &result);
  origin.bits[0] = 0b11111101101100110001110000110010;
  origin.bits[1] = 0b00000000000000000000000000010110;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_add_8
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -9878798789;
  // src2 = -3;
  src1.bits[0] = 0b01001100110100101000000111000101;
  src1.bits[1] = 0b00000000000000000000000000000010;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b10000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  int err = s21_add(src1, src2, &result);
  origin.bits[0] = 0b01001100110100101000000111001000;
  origin.bits[1] = 0b00000000000000000000000000000010;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_add_9
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 9999999999999999999;
  // src2 = 1;
  src1.bits[0] = 0b10001001111001111111111111111111;
  src1.bits[1] = 0b10001010110001110010001100000100;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_add(src1, src2, &result);
  origin.bits[0] = 0b10001001111010000000000000000000;
  origin.bits[1] = 0b10001010110001110010001100000100;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_add_10
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 18446744073709551615;
  // src2 = 1;
  src1.bits[0] = 0b11111111111111111111111111111111;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_add(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000001;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

  #test s21_add_11
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 18446744073709551615.0;
  // src2 = 965453154;
  src1.bits[0] = 0b11111111111111111111111111110110;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b00000000000000000000000000001001;
  src1.bits[3] = 0b00000000000000010000000000000000;
  src2.bits[0] = 0b00111001100010111010010101100010;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_add(src1, src2, &result);
  origin.bits[0] = 0b00111111011101000111010111001010;
  origin.bits[1] = 0b00000000000000000000000000000010;
  origin.bits[2] = 0b00000000000000000000000000001010;
  origin.bits[3] = 0b00000000000000010000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);


#test s21_add_12
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -545454512454545.35265454545645;
  // src2 = 54564654;
  src1.bits[0] = 0b10000010111000100101101011101101;
  src1.bits[1] = 0b11111001111010000010010110101101;
  src1.bits[2] = 0b10110000001111101111000010010100;
  src1.bits[3] = 0b10000000000011100000000000000000;
  src2.bits[0] = 0b00000011010000001001011100101110;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_add(src1, src2, &result);
  origin.bits[0] = 0b01110001001010101101101011101101;
  origin.bits[1] = 0b00101110001111001110000111111000;
  origin.bits[2] = 0b10110000001111101110111101101101;
  origin.bits[3] = 0b10000000000011100000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_add_13
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -545454512454545.35265454545645;
  // src2 = -5.352654545456454545645464;
  src1.bits[0] = 0b10000010111000100101101011101101;
  src1.bits[1] = 0b11111001111010000010010110101101;
  src1.bits[2] = 0b10110000001111101111000010010100;
  src1.bits[3] = 0b10000000000011100000000000000000;
  src2.bits[0] = 0b01001000000110110001111110011000;
  src2.bits[1] = 0b11111011111111011000100101101101;
  src2.bits[2] = 0b00000000000001000110110101110111;
  src2.bits[3] = 0b10000000000110000000000000000000;
  int err = s21_add(src1, src2, &result);
  origin.bits[0] = 0b10110110001010011011010111011010;
  origin.bits[1] = 0b11111001111010100000110001111111;
  origin.bits[2] = 0b10110000001111101111000010010100;
  origin.bits[3] = 0b10000000000011100000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_add_14
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 7961327845421.879754123131254;
  // src2 = 0;
  src1.bits[0] = 0b01001110111001000011100101110110;
  src1.bits[1] = 0b01001011001101011010000111011001;
  src1.bits[2] = 0b00011001101110010111010010111111;
  src1.bits[3] = 0b00000000000011110000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_add(src1, src2, &result);
  origin.bits[0] = 0b01001110111001000011100101110110;
  origin.bits[1] = 0b01001011001101011010000111011001;
  origin.bits[2] = 0b00011001101110010111010010111111;
  origin.bits[3] = 0b00000000000011110000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_add_15
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 12345677.987654345678987654346;
  // src2 = 87654323456.9876545678987653;
  src1.bits[0] = 0b10010001000010101111010011001010;
  src1.bits[1] = 0b11000000010001011101010111110010;
  src1.bits[2] = 0b00100111111001000001101100000000;
  src1.bits[3] = 0b00000000000101010000000000000000;
  src2.bits[0] = 0b00010001110011011101000110000101;
  src2.bits[1] = 0b11110101101111000110111111000000;
  src2.bits[2] = 0b00000010110101010000111100111111;
  src2.bits[3] = 0b00000000000100000000000000000000;
  int err = s21_add(src1, src2, &result);
  origin.bits[0] = 0b11010010000011011110010110111111;
  origin.bits[1] = 0b10100111010011100111001000100001;
  origin.bits[2] = 0b00011100010100111001110111101101;
  origin.bits[3] = 0b00000000000100010000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

  #test s21_add_16
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 79228162514264337593543950335;
  // src2 = -1;
  src1.bits[0] = 0b11111111111111111111111111111111;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b11111111111111111111111111111111;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  int err = s21_add(src1, src2, &result);
  origin.bits[0] = 0b11111111111111111111111111111110;
  origin.bits[1] = 0b11111111111111111111111111111111;
  origin.bits[2] = 0b11111111111111111111111111111111;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_add_17
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -79228162514264337593543950335;
  // src2 = 1;
  src1.bits[0] = 0b11111111111111111111111111111111;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b11111111111111111111111111111111;
  src1.bits[3] = 0b10000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_add(src1, src2, &result);
  origin.bits[0] = 0b11111111111111111111111111111110;
  origin.bits[1] = 0b11111111111111111111111111111111;
  origin.bits[2] = 0b11111111111111111111111111111111;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

 #test s21_add_18
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -784515454.7989898652154545652;
  // src2 = -579895323215489956.67897455465;
  src1.bits[0] = 0b10110001001110110100010111110100;
  src1.bits[1] = 0b00111000100000111010110010000001;
  src1.bits[2] = 0b00011001010110010101110000011000;
  src1.bits[3] = 0b10000000000100110000000000000000;
  src2.bits[0] = 0b11100110001001011001001101101001;
  src2.bits[1] = 0b00111000110110101110001010110100;
  src2.bits[2] = 0b10111011010111111101000100011110;
  src2.bits[3] = 0b10000000000010110000000000000000;
  int err = s21_add(src1, src2, &result);
  origin.bits[0] = 0b10011111111011011000101110000011;
  origin.bits[1] = 0b01111001100101101100001110101010;
  origin.bits[2] = 0b10111011010111111101000100100010;
  origin.bits[3] = 0b10000000000010110000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_add_19
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 0;
  // src2 = -37986322154988653.784354545765;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b01001111101101000110000001100101;
  src2.bits[1] = 0b01000010001101101011011001100001;
  src2.bits[2] = 0b01111010101111011000110010011010;
  src2.bits[3] = 0b10000000000000000000000000000000;
  int err = s21_add(src1, src2, &result);
  origin.bits[0] = 0b01001111101101000110000001100101;
  origin.bits[1] = 0b01000010001101101011011001100001;
  origin.bits[2] = 0b01111010101111011000110010011010;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

  #test s21_div_1
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 2;
  // src2 = 3;
  src1.bits[0] = 0b00000000000000000000000000000010;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_div(src1, src2, &result);
  origin.bits[0] = 0b00001010101010101010101010101011;
  origin.bits[1] = 0b00101001011011100000000110010110;
  origin.bits[2] = 0b00010101100010101000100110010100;
  origin.bits[3] = 0b00000000000111000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_div_2
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 3;
  // src2 = 2;
  src1.bits[0] = 0b00000000000000000000000000000011;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000010;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_div(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000001111;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000010000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_div_3
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 0;
  // src2 = 3;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_div(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_div_4
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 2;
  // src2 = 0.1;
  src1.bits[0] = 0b00000000000000000000000000000010;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000010000000000000000;
  int err = s21_div(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000010100;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_div_6
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 2;
  // src2 = -0.45;
  src1.bits[0] = 0b00000000000000000000000000000010;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000101101;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000100000000000000000;
  int err = s21_div(src1, src2, &result);
  origin.bits[0] = 0b10011100011100011100011100011100;
  origin.bits[1] = 0b00010100001100101011010100111101;
  origin.bits[2] = 0b10001111100110111001010100110001;
  origin.bits[3] = 0b10000000000111000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_div_8
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 4;
  // src2 = 97623323;
  src1.bits[0] = 0b00000000000000000000000000000100;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000101110100011001110100011011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_div(src1, src2, &result);
  origin.bits[0] = 0b10010111101101001110101000001011;
  origin.bits[1] = 0b00110110010000100101011010111111;
  origin.bits[2] = 0b00000000000000000000000000010110;
  origin.bits[3] = 0b00000000000111000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_div_9
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 65658654;
  // src2 = 5;
  src1.bits[0] = 0b00000011111010011101111100011110;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000101;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_div(src1, src2, &result);
  origin.bits[0] = 0b00000111110100111011111000111100;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000010000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_div_10
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -364748;
  // src2 = 1;
  src1.bits[0] = 0b00000000000001011001000011001100;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b10000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_div(src1, src2, &result);
  origin.bits[0] = 0b00000000000001011001000011001100;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_div_11
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 1;
  // src2 = 98745654321;
  src1.bits[0] = 0b00000000000000000000000000000001;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b11111101101100110001110000110001;
  src2.bits[1] = 0b00000000000000000000000000010110;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_div(src1, src2, &result);
  origin.bits[0] = 0b01010100010110111010010000111111;
  origin.bits[1] = 0b00000001011001111100100011001000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000111000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_div_12
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -9878798789;
  // src2 = -3;
  src1.bits[0] = 0b01001100110100101000000111000101;
  src1.bits[1] = 0b00000000000000000000000000000010;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b10000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  int err = s21_div(src1, src2, &result);
  origin.bits[0] = 0b00000010100000101010101010101011;
  origin.bits[1] = 0b00011000110010011011111011000100;
  origin.bits[2] = 0b01101010011001101000000010110110;
  origin.bits[3] = 0b00000000000100110000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_div_13
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 9999999999999999999;
  // src2 = 1;
  src1.bits[0] = 0b10001001111001111111111111111111;
  src1.bits[1] = 0b10001010110001110010001100000100;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_div(src1, src2, &result);
  origin.bits[0] = 0b10001001111001111111111111111111;
  origin.bits[1] = 0b10001010110001110010001100000100;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_div_14
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 18446744073709551615;
  // src2 = 1;
  src1.bits[0] = 0b11111111111111111111111111111111;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_div(src1, src2, &result);
  origin.bits[0] = 0b11111111111111111111111111111111;
  origin.bits[1] = 0b11111111111111111111111111111111;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_div_15
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 18446744073709551615.0;
  // src2 = 965453154;
  src1.bits[0] = 0b11111111111111111111111111110110;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b00000000000000000000000000001001;
  src1.bits[3] = 0b00000000000000010000000000000000;
  src2.bits[0] = 0b00111001100010111010010101100010;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_div(src1, src2, &result);
  origin.bits[0] = 0b10001010010011110101000101010001;
  origin.bits[1] = 0b00010010001101000001111111010011;
  origin.bits[2] = 0b00111101101111001100101101111101;
  origin.bits[3] = 0b00000000000100100000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_div_16
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -545454512454545.35265454545645;
  // src2 = 54564654;
  src1.bits[0] = 0b10000010111000100101101011101101;
  src1.bits[1] = 0b11111001111010000010010110101101;
  src1.bits[2] = 0b10110000001111101111000010010100;
  src1.bits[3] = 0b10000000000011100000000000000000;
  src2.bits[0] = 0b00000011010000001001011100101110;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_div(src1, src2, &result);
  origin.bits[0] = 0b01111001011111001100111101000100;
  origin.bits[1] = 0b01101111110101101111010000100100;
  origin.bits[2] = 0b00100000010011001110010100100010;
  origin.bits[3] = 0b10000000000101010000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_div_19
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 12345677.987654345678987654346;
  // src2 = 87654323456.9876545678987653;
  src1.bits[0] = 0b10010001000010101111010011001010;
  src1.bits[1] = 0b11000000010001011101010111110010;
  src1.bits[2] = 0b00100111111001000001101100000000;
  src1.bits[3] = 0b00000000000101010000000000000000;
  src2.bits[0] = 0b00010001110011011101000110000101;
  src2.bits[1] = 0b11110101101111000110111111000000;
  src2.bits[2] = 0b00000010110101010000111100111111;
  src2.bits[3] = 0b00000000000100000000000000000000;
  int err = s21_div(src1, src2, &result);
  origin.bits[0] = 0b11000110100011000111000110111011;
  origin.bits[1] = 0b01000001110101101000100101010000;
  origin.bits[2] = 0b00000000000000010010101001000000;
  origin.bits[3] = 0b00000000000111000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_div_20
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -12345677.987654345678987654346;
  // src2 = 87654323456.9876545678987653;
  src1.bits[0] = 0b10010001000010101111010011001010;
  src1.bits[1] = 0b11000000010001011101010111110010;
  src1.bits[2] = 0b00100111111001000001101100000000;
  src1.bits[3] = 0b10000000000101010000000000000000;
  src2.bits[0] = 0b00010001110011011101000110000101;
  src2.bits[1] = 0b11110101101111000110111111000000;
  src2.bits[2] = 0b00000010110101010000111100111111;
  src2.bits[3] = 0b00000000000100000000000000000000;
  int err = s21_div(src1, src2, &result);
  origin.bits[0] = 0b11000110100011000111000110111011;
  origin.bits[1] = 0b01000001110101101000100101010000;
  origin.bits[2] = 0b00000000000000010010101001000000;
  origin.bits[3] = 0b10000000000111000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_div_21
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 12345677.987654345678987654346;
  // src2 = -87654323456.9876545678987653;
  src1.bits[0] = 0b10010001000010101111010011001010;
  src1.bits[1] = 0b11000000010001011101010111110010;
  src1.bits[2] = 0b00100111111001000001101100000000;
  src1.bits[3] = 0b00000000000101010000000000000000;
  src2.bits[0] = 0b00010001110011011101000110000101;
  src2.bits[1] = 0b11110101101111000110111111000000;
  src2.bits[2] = 0b00000010110101010000111100111111;
  src2.bits[3] = 0b10000000000100000000000000000000;
  int err = s21_div(src1, src2, &result);
  origin.bits[0] = 0b11000110100011000111000110111011;
  origin.bits[1] = 0b01000001110101101000100101010000;
  origin.bits[2] = 0b00000000000000010010101001000000;
  origin.bits[3] = 0b10000000000111000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_div_22
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -12345677.987654345678987654346;
  // src2 = -87654323456.9876545678987653;
  src1.bits[0] = 0b10010001000010101111010011001010;
  src1.bits[1] = 0b11000000010001011101010111110010;
  src1.bits[2] = 0b00100111111001000001101100000000;
  src1.bits[3] = 0b10000000000101010000000000000000;
  src2.bits[0] = 0b00010001110011011101000110000101;
  src2.bits[1] = 0b11110101101111000110111111000000;
  src2.bits[2] = 0b00000010110101010000111100111111;
  src2.bits[3] = 0b10000000000100000000000000000000;
  int err = s21_div(src1, src2, &result);
  origin.bits[0] = 0b11000110100011000111000110111011;
  origin.bits[1] = 0b01000001110101101000100101010000;
  origin.bits[2] = 0b00000000000000010010101001000000;
  origin.bits[3] = 0b00000000000111000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_div_23
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 0;
  // src2 = 0.69;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000001000101;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000100000000000000000;
  int err = s21_div(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_div_24
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 0;
  // src2 = 0.8;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000001000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000010000000000000000;
  int err = s21_div(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);


#test s21_div_26
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 79228162514264337593543950335;
  // src2 = -1;
  src1.bits[0] = 0b11111111111111111111111111111111;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b11111111111111111111111111111111;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  int err = s21_div(src1, src2, &result);
  origin.bits[0] = 0b11111111111111111111111111111111;
  origin.bits[1] = 0b11111111111111111111111111111111;
  origin.bits[2] = 0b11111111111111111111111111111111;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_div_27
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 7922816251427554395;
  // src2 = 65645646;
  src1.bits[0] = 0b01011111000010000000010001011011;
  src1.bits[1] = 0b01101101111100110111111101100111;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000011111010011010110001001110;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_div(src1, src2, &result);
  origin.bits[0] = 0b01101001110011011000100110011100;
  origin.bits[1] = 0b01100010100101110010111010100011;
  origin.bits[2] = 0b00100110111111110100110000011011;
  origin.bits[3] = 0b00000000000100010000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_div_28
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 665464545;
  // src2 = 8798232189789785;
  src1.bits[0] = 0b00100111101010100010111011100001;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00010000010100101110011001011001;
  src2.bits[1] = 0b00000000000111110100000111110010;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_div(src1, src2, &result);
  origin.bits[0] = 0b01010010000011000001010110110110;
  origin.bits[1] = 0b00000000101000000110010011001100;
  origin.bits[2] = 0b00000000000000000000000000101001;
  origin.bits[3] = 0b00000000000111000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_div_29
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 2.7986531268974139743;
  // src2 = 9.979623121254565121244554;
  src1.bits[0] = 0b11111110100100001101100101011111;
  src1.bits[1] = 0b10000100011001000010000111101000;
  src1.bits[2] = 0b00000000000000000000000000000001;
  src1.bits[3] = 0b00000000000100110000000000000000;
  src2.bits[0] = 0b11010100101011100011110110001010;
  src2.bits[1] = 0b01110100000101000010011110100011;
  src2.bits[2] = 0b00000000000010000100000101000100;
  src2.bits[3] = 0b00000000000110000000000000000000;
  int err = s21_div(src1, src2, &result);
  origin.bits[0] = 0b10110000000110101011000111000111;
  origin.bits[1] = 0b10100110110111100111111001101001;
  origin.bits[2] = 0b00001001000011111011011111101101;
  origin.bits[3] = 0b00000000000111000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_div_30
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -9798956154578676.797564534156;
  // src2 = -2156878451.854764;
  src1.bits[0] = 0b01010100010000000011110110001100;
  src1.bits[1] = 0b10001011010100100000010101011001;
  src1.bits[2] = 0b00011111101010011000000110101101;
  src1.bits[3] = 0b10000000000011000000000000000000;
  src2.bits[0] = 0b01100101111100100100110110101100;
  src2.bits[1] = 0b00000000000001111010100110101011;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000001100000000000000000;
  int err = s21_div(src1, src2, &result);
  origin.bits[0] = 0b11110001110100111110110111100000;
  origin.bits[1] = 0b10001101111000011110011001011110;
  origin.bits[2] = 0b10010010110010111100110101011011;
  origin.bits[3] = 0b00000000000101100000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_div_31
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 0.5456465465486476846545465485;
  // src2 = 0.68985125146545154;
  src1.bits[0] = 0b00001011000011110111000010001101;
  src1.bits[1] = 0b10010110101100000101100101010001;
  src1.bits[2] = 0b00010001101000010111101110000001;
  src1.bits[3] = 0b00000000000111000000000000000000;
  src2.bits[0] = 0b00010111001001010100110000000010;
  src2.bits[1] = 0b00000000111101010001010110011011;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000100010000000000000000;
  int err = s21_div(src1, src2, &result);
  origin.bits[0] = 0b11111100011000000110000010011111;
  origin.bits[1] = 0b00110010101101100111001011100101;
  origin.bits[2] = 0b00011001100011101011000001111010;
  origin.bits[3] = 0b00000000000111000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

  #test s21_mod_1
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 5;
  // src2 = 3;
  src1.bits[0] = 0b00000000000000000000000000000101;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000010;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mod_2
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 3;
  // src2 = 2;
  src1.bits[0] = 0b00000000000000000000000000000011;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000010;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000001;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mod_3
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 0;
  // src2 = 3;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);


#test s21_mod_5
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 0;
  // src2 = 3;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mod_6
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 2;
  // src2 = -0.45;
  src1.bits[0] = 0b00000000000000000000000000000010;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000101101;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000100000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000010100;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000100000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mod_7
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 6521;
  // src2 = 74121;
  src1.bits[0] = 0b00000000000000000001100101111001;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000010010000110001001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000001100101111001;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mod_8
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 4;
  // src2 = 97623323;
  src1.bits[0] = 0b00000000000000000000000000000100;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000101110100011001110100011011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000100;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mod_9
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 65658654;
  // src2 = 5;
  src1.bits[0] = 0b00000011111010011101111100011110;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000101;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000100;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);



#test s21_mod_11
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 1;
  // src2 = 98745654321;
  src1.bits[0] = 0b00000000000000000000000000000001;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b11111101101100110001110000110001;
  src2.bits[1] = 0b00000000000000000000000000010110;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000001;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mod_12
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -9878798789;
  // src2 = -3;
  src1.bits[0] = 0b01001100110100101000000111000101;
  src1.bits[1] = 0b00000000000000000000000000000010;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b10000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000010;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mod_13
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 9999999999999999999;
  // src2 = 1;
  src1.bits[0] = 0b10001001111001111111111111111111;
  src1.bits[1] = 0b10001010110001110010001100000100;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mod_14
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 18446744073709551615;
  // src2 = 1;
  src1.bits[0] = 0b11111111111111111111111111111111;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mod_15
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 18446744073709551615.0;
  // src2 = 965453154;
  src1.bits[0] = 0b11111111111111111111111111110110;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b00000000000000000000000000001001;
  src1.bits[3] = 0b00000000000000010000000000000000;
  src2.bits[0] = 0b00111001100010111010010101100010;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b10101010000010000011011000010110;
  origin.bits[1] = 0b00000000000000000000000000000001;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000010000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mod_16
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -545454512454545.35265454545645;
  // src2 = 54564654;
  src1.bits[0] = 0b10000010111000100101101011101101;
  src1.bits[1] = 0b11111001111010000010010110101101;
  src1.bits[2] = 0b10110000001111101111000010010100;
  src1.bits[3] = 0b10000000000011100000000000000000;
  src2.bits[0] = 0b00000011010000001001011100101110;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b10111101010000100101101011101101;
  origin.bits[1] = 0b00001001111110101010011110000010;
  origin.bits[2] = 0b00000000000000000000000011011001;
  origin.bits[3] = 0b10000000000011100000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mod_17
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -545454512454545.35265454545645;
  // src2 = -5.352654545456454545645464;
  src1.bits[0] = 0b10000010111000100101101011101101;
  src1.bits[1] = 0b11111001111010000010010110101101;
  src1.bits[2] = 0b10110000001111101111000010010100;
  src1.bits[3] = 0b10000000000011100000000000000000;
  src2.bits[0] = 0b01001000000110110001111110011000;
  src2.bits[1] = 0b11111011111111011000100101101101;
  src2.bits[2] = 0b00000000000001000110110101110111;
  src2.bits[3] = 0b10000000000110000000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b01110011110011100101101100100000;
  origin.bits[1] = 0b00000100110001110101111011101100;
  origin.bits[2] = 0b00000000000000001110001000111110;
  origin.bits[3] = 0b10000000000110000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mod_18
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 7961327845421.879754123131254;
  // src2 = -0.78;
  src1.bits[0] = 0b01001110111001000011100101110110;
  src1.bits[1] = 0b01001011001101011010000111011001;
  src1.bits[2] = 0b00011001101110010111010010111111;
  src1.bits[3] = 0b00000000000011110000000000000000;
  src2.bits[0] = 0b00000000000000000000000001001110;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000100000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b01001100110001100111100101110110;
  origin.bits[1] = 0b00000000000000011110101011100111;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000011110000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mod_19
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 12345677.987654345678987654346;
  // src2 = 87654323456.9876545678987653;
  src1.bits[0] = 0b10010001000010101111010011001010;
  src1.bits[1] = 0b11000000010001011101010111110010;
  src1.bits[2] = 0b00100111111001000001101100000000;
  src1.bits[3] = 0b00000000000101010000000000000000;
  src2.bits[0] = 0b00010001110011011101000110000101;
  src2.bits[1] = 0b11110101101111000110111111000000;
  src2.bits[2] = 0b00000010110101010000111100111111;
  src2.bits[3] = 0b00000000000100000000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b10010001000010101111010011001010;
  origin.bits[1] = 0b11000000010001011101010111110010;
  origin.bits[2] = 0b00100111111001000001101100000000;
  origin.bits[3] = 0b00000000000101010000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mod_20
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -12345677.987654345678987654346;
  // src2 = 87654323456.9876545678987653;
  src1.bits[0] = 0b10010001000010101111010011001010;
  src1.bits[1] = 0b11000000010001011101010111110010;
  src1.bits[2] = 0b00100111111001000001101100000000;
  src1.bits[3] = 0b10000000000101010000000000000000;
  src2.bits[0] = 0b00010001110011011101000110000101;
  src2.bits[1] = 0b11110101101111000110111111000000;
  src2.bits[2] = 0b00000010110101010000111100111111;
  src2.bits[3] = 0b00000000000100000000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b10010001000010101111010011001010;
  origin.bits[1] = 0b11000000010001011101010111110010;
  origin.bits[2] = 0b00100111111001000001101100000000;
  origin.bits[3] = 0b10000000000101010000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mod_21
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 12345677.987654345678987654346;
  // src2 = -87654323456.9876545678987653;
  src1.bits[0] = 0b10010001000010101111010011001010;
  src1.bits[1] = 0b11000000010001011101010111110010;
  src1.bits[2] = 0b00100111111001000001101100000000;
  src1.bits[3] = 0b00000000000101010000000000000000;
  src2.bits[0] = 0b00010001110011011101000110000101;
  src2.bits[1] = 0b11110101101111000110111111000000;
  src2.bits[2] = 0b00000010110101010000111100111111;
  src2.bits[3] = 0b10000000000100000000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b10010001000010101111010011001010;
  origin.bits[1] = 0b11000000010001011101010111110010;
  origin.bits[2] = 0b00100111111001000001101100000000;
  origin.bits[3] = 0b00000000000101010000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mod_22
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -12345677.987654345678987654346;
  // src2 = -87654323456.9876545678987653;
  src1.bits[0] = 0b10010001000010101111010011001010;
  src1.bits[1] = 0b11000000010001011101010111110010;
  src1.bits[2] = 0b00100111111001000001101100000000;
  src1.bits[3] = 0b10000000000101010000000000000000;
  src2.bits[0] = 0b00010001110011011101000110000101;
  src2.bits[1] = 0b11110101101111000110111111000000;
  src2.bits[2] = 0b00000010110101010000111100111111;
  src2.bits[3] = 0b10000000000100000000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b10010001000010101111010011001010;
  origin.bits[1] = 0b11000000010001011101010111110010;
  origin.bits[2] = 0b00100111111001000001101100000000;
  origin.bits[3] = 0b10000000000101010000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mod_23
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 336565445454313.859865545;
  // src2 = 0.69;
  src1.bits[0] = 0b00111110111111000101101111001001;
  src1.bits[1] = 0b00111111110101011110000010001011;
  src1.bits[2] = 0b00000000000000000100011101000101;
  src1.bits[3] = 0b00000000000010010000000000000000;
  src2.bits[0] = 0b00000000000000000000000001000101;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000100000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b00011100100110100010101011001001;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000010010000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mod_24
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -15456451234534;
  // src2 = 0.8;
  src1.bits[0] = 0b10111100010010010000101011100110;
  src1.bits[1] = 0b00000000000000000000111000001110;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b10000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000001000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000010000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000100;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000010000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mod_25
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 0;
  // src2 = -0.42354543545;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b11011100100001110000101110111001;
  src2.bits[1] = 0b00000000000000000000000000001001;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000010110000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mod_26
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 79228162514264337593543950335;
  // src2 = -1;
  src1.bits[0] = 0b11111111111111111111111111111111;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b11111111111111111111111111111111;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mod_27
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 7922816251427554395;
  // src2 = -65645646;
  src1.bits[0] = 0b01011111000010000000010001011011;
  src1.bits[1] = 0b01101101111100110111111101100111;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000011111010011010110001001110;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b00000001001111101101001101110111;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mod_28
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -7922816251427554395;
  // src2 = -65645646;
  src1.bits[0] = 0b01011111000010000000010001011011;
  src1.bits[1] = 0b01101101111100110111111101100111;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b10000000000000000000000000000000;
  src2.bits[0] = 0b00000011111010011010110001001110;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b00000001001111101101001101110111;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mod_29
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 2.7986531268974139743;
  // src2 = 9.979623121254565121244554;
  src1.bits[0] = 0b11111110100100001101100101011111;
  src1.bits[1] = 0b10000100011001000010000111101000;
  src1.bits[2] = 0b00000000000000000000000000000001;
  src1.bits[3] = 0b00000000000100110000000000000000;
  src2.bits[0] = 0b11010100101011100011110110001010;
  src2.bits[1] = 0b01110100000101000010011110100011;
  src2.bits[2] = 0b00000000000010000100000101000100;
  src2.bits[3] = 0b00000000000110000000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b11111110100100001101100101011111;
  origin.bits[1] = 0b10000100011001000010000111101000;
  origin.bits[2] = 0b00000000000000000000000000000001;
  origin.bits[3] = 0b00000000000100110000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mod_30
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -9798956154578676.797564534156;
  // src2 = -2156878451.854764;
  src1.bits[0] = 0b01010100010000000011110110001100;
  src1.bits[1] = 0b10001011010100100000010101011001;
  src1.bits[2] = 0b00011111101010011000000110101101;
  src1.bits[3] = 0b10000000000011000000000000000000;
  src2.bits[0] = 0b01100101111100100100110110101100;
  src2.bits[1] = 0b00000000000001111010100110101011;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000001100000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b10101100101110100101000010001100;
  origin.bits[1] = 0b11010010101110000010010011000101;
  origin.bits[2] = 0b00000000000000000000000000100100;
  origin.bits[3] = 0b10000000000011000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mod_31
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 0.5456465465486476846545465485;
  // src2 = 0.68985125146545154;
  src1.bits[0] = 0b00001011000011110111000010001101;
  src1.bits[1] = 0b10010110101100000101100101010001;
  src1.bits[2] = 0b00010001101000010111101110000001;
  src1.bits[3] = 0b00000000000111000000000000000000;
  src2.bits[0] = 0b00010111001001010100110000000010;
  src2.bits[1] = 0b00000000111101010001010110011011;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000100010000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b00001011000011110111000010001101;
  origin.bits[1] = 0b10010110101100000101100101010001;
  origin.bits[2] = 0b00010001101000010111101110000001;
  origin.bits[3] = 0b00000000000111000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mod_32
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -0.77545545454546589781;
  // src2 = 87894515154546456456;
  src1.bits[0] = 0b10101100001010000001100001010101;
  src1.bits[1] = 0b00110100001010010001111010111100;
  src1.bits[2] = 0b00000000000000000000000000000100;
  src1.bits[3] = 0b10000000000101000000000000000000;
  src2.bits[0] = 0b00010011111011011111011110001000;
  src2.bits[1] = 0b11000011110010000000101111011001;
  src2.bits[2] = 0b00000000000000000000000000000100;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b10101100001010000001100001010101;
  origin.bits[1] = 0b00110100001010010001111010111100;
  origin.bits[2] = 0b00000000000000000000000000000100;
  origin.bits[3] = 0b10000000000101000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mod_33
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -79228162514264337593543950335;
  // src2 = 2;
  src1.bits[0] = 0b11111111111111111111111111111111;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b11111111111111111111111111111111;
  src1.bits[3] = 0b10000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000010;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mod(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000001;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);


  #test s21_mul_1
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 2;
  // src2 = 3;
  src1.bits[0] = 0b00000000000000000000000000000010;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mul(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000110;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mul_2
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 3;
  // src2 = 2;
  src1.bits[0] = 0b00000000000000000000000000000011;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000010;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mul(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000110;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mul_3
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 0;
  // src2 = 3;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mul(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mul_4
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 2;
  // src2 = 0;
  src1.bits[0] = 0b00000000000000000000000000000010;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mul(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);



#test s21_mul_6
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 2;
  // src2 = 0;
  src1.bits[0] = 0b00000000000000000000000000000010;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mul(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mul_7
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 6521;
  // src2 = 74121;
  src1.bits[0] = 0b00000000000000000001100101111001;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000010010000110001001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
int err = s21_mul(src1, src2, &result);
  origin.bits[0] = 0b00011100110011110011101011000001;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mul_8
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 4;
  // src2 = 97623323;
  src1.bits[0] = 0b00000000000000000000000000000100;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000101110100011001110100011011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mul(src1, src2, &result);
  origin.bits[0] = 0b00010111010001100111010001101100;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mul_9
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 65658654;
  // src2 = 5;
  src1.bits[0] = 0b00000011111010011101111100011110;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000101;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
int err = s21_mul(src1, src2, &result);
  origin.bits[0] = 0b00010011100100010101101110010110;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mul_10
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -364748;
  // src2 = 1;
  src1.bits[0] = 0b00000000000001011001000011001100;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b10000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mul(src1, src2, &result);
  origin.bits[0] = 0b00000000000001011001000011001100;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mul_11
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 1;
  // src2 = 98745654321;
  src1.bits[0] = 0b00000000000000000000000000000001;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b11111101101100110001110000110001;
  src2.bits[1] = 0b00000000000000000000000000010110;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mul(src1, src2, &result);
  origin.bits[0] = 0b11111101101100110001110000110001;
  origin.bits[1] = 0b00000000000000000000000000010110;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mul_12
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -9878798789;
  // src2 = -3;
  src1.bits[0] = 0b01001100110100101000000111000101;
  src1.bits[1] = 0b00000000000000000000000000000010;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b10000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  int err = s21_mul(src1, src2, &result);
  origin.bits[0] = 0b11100110011101111000010101001111;
  origin.bits[1] = 0b00000000000000000000000000000110;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mul_13
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 9999999999999999999;
  // src2 = 1;
  src1.bits[0] = 0b10001001111001111111111111111111;
  src1.bits[1] = 0b10001010110001110010001100000100;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mul(src1, src2, &result);
  origin.bits[0] = 0b10001001111001111111111111111111;
  origin.bits[1] = 0b10001010110001110010001100000100;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mul_14
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 18446744073709551615;
  // src2 = 1;
  src1.bits[0] = 0b11111111111111111111111111111111;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mul(src1, src2, &result);
  origin.bits[0] = 0b11111111111111111111111111111111;
  origin.bits[1] = 0b11111111111111111111111111111111;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mul_15
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 18446744073709551615.0;
  // src2 = 965453154;
  src1.bits[0] = 0b11111111111111111111111111110110;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b00000000000000000000000000001001;
  src1.bits[3] = 0b00000000000000010000000000000000;
  src2.bits[0] = 0b00111001100010111010010101100010;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mul(src1, src2, &result);
  origin.bits[0] = 0b11000110011101000101101010011110;
  origin.bits[1] = 0b11111111111111111111111111111111;
  origin.bits[2] = 0b00111001100010111010010101100001;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);


#test s21_mul_18
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 7961327845421.879754123131254;
  // src2 = 0;
  src1.bits[0] = 0b01001110111001000011100101110110;
  src1.bits[1] = 0b01001011001101011010000111011001;
  src1.bits[2] = 0b00011001101110010111010010111111;
  src1.bits[3] = 0b00000000000011110000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mul(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mul_19
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 12345677.987654345678987654346;
  // src2 = 87654323456.9876545678987653;
  src1.bits[0] = 0b10010001000010101111010011001010;
  src1.bits[1] = 0b11000000010001011101010111110010;
  src1.bits[2] = 0b00100111111001000001101100000000;
  src1.bits[3] = 0b00000000000101010000000000000000;
  src2.bits[0] = 0b00010001110011011101000110000101;
  src2.bits[1] = 0b11110101101111000110111111000000;
  src2.bits[2] = 0b00000010110101010000111100111111;
  src2.bits[3] = 0b00000000000100000000000000000000;
  int err = s21_mul(src1, src2, &result);
  origin.bits[0] = 0b00000001010010011001000011101110;
  origin.bits[1] = 0b10101010100001010100111110001111;
  origin.bits[2] = 0b00100010111101110101101000011010;
  origin.bits[3] = 0b00000000000010100000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mul_20
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -12345677.987654345678987654346;
  // src2 = 87654323456.9876545678987653;
  src1.bits[0] = 0b10010001000010101111010011001010;
  src1.bits[1] = 0b11000000010001011101010111110010;
  src1.bits[2] = 0b00100111111001000001101100000000;
  src1.bits[3] = 0b10000000000101010000000000000000;
  src2.bits[0] = 0b00010001110011011101000110000101;
  src2.bits[1] = 0b11110101101111000110111111000000;
  src2.bits[2] = 0b00000010110101010000111100111111;
  src2.bits[3] = 0b00000000000100000000000000000000;
  int err = s21_mul(src1, src2, &result);
  origin.bits[0] = 0b00000001010010011001000011101110;
  origin.bits[1] = 0b10101010100001010100111110001111;
  origin.bits[2] = 0b00100010111101110101101000011010;
  origin.bits[3] = 0b10000000000010100000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mul_21
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 12345677.987654345678987654346;
  // src2 = -87654323456.9876545678987653;
  src1.bits[0] = 0b10010001000010101111010011001010;
  src1.bits[1] = 0b11000000010001011101010111110010;
  src1.bits[2] = 0b00100111111001000001101100000000;
  src1.bits[3] = 0b00000000000101010000000000000000;
  src2.bits[0] = 0b00010001110011011101000110000101;
  src2.bits[1] = 0b11110101101111000110111111000000;
  src2.bits[2] = 0b00000010110101010000111100111111;
  src2.bits[3] = 0b10000000000100000000000000000000;
  int err = s21_mul(src1, src2, &result);
  origin.bits[0] = 0b00000001010010011001000011101110;
  origin.bits[1] = 0b10101010100001010100111110001111;
  origin.bits[2] = 0b00100010111101110101101000011010;
  origin.bits[3] = 0b10000000000010100000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mul_22
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -12345677.987654345678987654346;
  // src2 = -87654323456.9876545678987653;
  src1.bits[0] = 0b10010001000010101111010011001010;
  src1.bits[1] = 0b11000000010001011101010111110010;
  src1.bits[2] = 0b00100111111001000001101100000000;
  src1.bits[3] = 0b10000000000101010000000000000000;
  src2.bits[0] = 0b00010001110011011101000110000101;
  src2.bits[1] = 0b11110101101111000110111111000000;
  src2.bits[2] = 0b00000010110101010000111100111111;
  src2.bits[3] = 0b10000000000100000000000000000000;
  int err = s21_mul(src1, src2, &result);
  origin.bits[0] = 0b00000001010010011001000011101110;
  origin.bits[1] = 0b10101010100001010100111110001111;
  origin.bits[2] = 0b00100010111101110101101000011010;
  origin.bits[3] = 0b00000000000010100000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mul_23
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 0;
  // src2 = 0;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mul(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mul_24
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 0;
  // src2 = 0;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mul(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);


#test s21_mul_26
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 79228162514264337593543950335;
  // src2 = -1;
  src1.bits[0] = 0b11111111111111111111111111111111;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b11111111111111111111111111111111;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  int err = s21_mul(src1, src2, &result);
  origin.bits[0] = 0b11111111111111111111111111111111;
  origin.bits[1] = 0b11111111111111111111111111111111;
  origin.bits[2] = 0b11111111111111111111111111111111;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mul_27
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src2 = 65645646;
  src1.bits[0] = 0b01011111000010000000010001011011;
  src1.bits[1] = 0b01101101111100110111111101100111;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000011111010011010110001001110;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mul(src1, src2, &result);
  origin.bits[0] = 0b01011111001100010111011110111010;
  origin.bits[1] = 0b01000100111111001101101110110001;
  origin.bits[2] = 0b00000001101011100011011100011110;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mul_28
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 665464545;
  // src2 = 8798232189789785;
  src1.bits[0] = 0b00100111101010100010111011100001;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00010000010100101110011001011001;
  src2.bits[1] = 0b00000000000111110100000111110010;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_mul(src1, src2, &result);
  origin.bits[0] = 0b11000100010110100111001000111001;
  origin.bits[1] = 0b01100100100011011110110011010011;
  origin.bits[2] = 0b00000000000001001101011111010011;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_mul_29
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 2.7986531268974139743;
  // src2 = 9.979623121254565121244554;
  src1.bits[0] = 0b11111110100100001101100101011111;
  src1.bits[1] = 0b10000100011001000010000111101000;
  src1.bits[2] = 0b00000000000000000000000000000001;
  src1.bits[3] = 0b00000000000100110000000000000000;
  src2.bits[0] = 0b11010100101011100011110110001010;
  src2.bits[1] = 0b01110100000101000010011110100011;
  src2.bits[2] = 0b00000000000010000100000101000100;
  src2.bits[3] = 0b00000000000110000000000000000000;
  int err = s21_mul(src1, src2, &result);
  origin.bits[0] = 0b10000010010010011010001110000110;
  origin.bits[1] = 0b00001010000101010010010001010111;
  origin.bits[2] = 0b01011010001111101011111001101000;
  origin.bits[3] = 0b00000000000110110000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);


  #test s21_sub_1
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 5;
  // src2 = 3;
  src1.bits[0] = 0b00000000000000000000000000000101;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000010;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_2
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 3;
  // src2 = 6;
  src1.bits[0] = 0b00000000000000000000000000000011;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000110;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000011;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_3
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 0;
  // src2 = 8;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000001000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000001000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_4
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 7;
  // src2 = 0;
  src1.bits[0] = 0b00000000000000000000000000000111;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000111;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_5
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 0.0;
  // src2 = 5;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b10000000000000010000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000101;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
 int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000110010;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000010000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_6
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 3;
  // src2 = 0;
  src1.bits[0] = 0b00000000000000000000000000000011;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000011;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_7
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 787891;
  // src2 = 238471;
  src1.bits[0] = 0b00000000000011000000010110110011;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000111010001110000111;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b00000000000010000110001000101100;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_8
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 9;
  // src2 = 18571145;
  src1.bits[0] = 0b00000000000000000000000000001001;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000001000110110101111110001001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b00000001000110110101111110000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_9
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 1849687;
  // src2 = 6;
  src1.bits[0] = 0b00000000000111000011100101010111;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000110;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b00000000000111000011100101010001;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_10
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -3187878;
  // src2 = 1;
  src1.bits[0] = 0b00000000001100001010010010100110;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b10000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b00000000001100001010010010100111;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_11
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 1;
  // src2 = 18768768;
  src1.bits[0] = 0b00000000000000000000000000000001;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000001000111100110001110000000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b00000001000111100110001101111111;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_12
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -2168564564;
  // src2 = -9;
  src1.bits[0] = 0b10000001010000011010101101010100;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b10000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000001001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b10000001010000011010101101001011;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_13
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 9999999999999999999;
  // src2 = 1;
  src1.bits[0] = 0b10001001111001111111111111111111;
  src1.bits[1] = 0b10001010110001110010001100000100;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b10001001111001111111111111111110;
  origin.bits[1] = 0b10001010110001110010001100000100;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_14
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 18446744073709551615;
  // src2 = 1;
  src1.bits[0] = 0b11111111111111111111111111111111;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b11111111111111111111111111111110;
  origin.bits[1] = 0b11111111111111111111111111111111;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_15
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 18446744073709551615.0;
  // src2 = 3556877454;
  src1.bits[0] = 0b11111111111111111111111111110110;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b00000000000000000000000000001001;
  src1.bits[3] = 0b00000000000000010000000000000000;
  src2.bits[0] = 0b11010100000000011010010010001110;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b10110111111011111001001001101010;
  origin.bits[1] = 0b11111111111111111111111111110111;
  origin.bits[2] = 0b00000000000000000000000000001001;
  origin.bits[3] = 0b00000000000000010000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_16
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -54896651557845.352654545456455;
  // src2 = 21465;
  src1.bits[0] = 0b01110001100100011000110101000111;
  src1.bits[1] = 0b00001111010011100000001101011111;
  src1.bits[2] = 0b10110001011000010111001000100100;
  src1.bits[3] = 0b10000000000011110000000000000000;
  src2.bits[0] = 0b00000000000000000101001111011001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b01111001010101000000110101000111;
  origin.bits[1] = 0b00111001001100010000001100100101;
  origin.bits[2] = 0b10110001011000010111001000100101;
  origin.bits[3] = 0b10000000000011110000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_17
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 7961327845421.879754123131254;
  // src2 = 0;
  src1.bits[0] = 0b01001110111001000011100101110110;
  src1.bits[1] = 0b01001011001101011010000111011001;
  src1.bits[2] = 0b00011001101110010111010010111111;
  src1.bits[3] = 0b00000000000011110000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b01001110111001000011100101110110;
  origin.bits[1] = 0b01001011001101011010000111011001;
  origin.bits[2] = 0b00011001101110010111010010111111;
  origin.bits[3] = 0b00000000000011110000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_18
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 68845645467.987654345678987654;
  // src2 = 87654323456.9876545678987653;
  src1.bits[0] = 0b01010100100111010010000110000110;
  src1.bits[1] = 0b00100000110000010111010000110011;
  src1.bits[2] = 0b11011110011100111100100001111111;
  src1.bits[3] = 0b00000000000100100000000000000000;
  src2.bits[0] = 0b00010001110011011101000110000101;
  src2.bits[1] = 0b11110101101111000110111111000000;
  src2.bits[2] = 0b00000010110101010000111100111111;
  src2.bits[3] = 0b00000000000100000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b10011111110010001011011001101110;
  origin.bits[1] = 0b11011100110110100011001011010011;
  origin.bits[2] = 0b00111100110001100010110001111100;
  origin.bits[3] = 0b10000000000100100000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_19
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -12345677.987654345678987654346;
  // src2 = 87654323456.9876545678987653;
  src1.bits[0] = 0b10010001000010101111010011001010;
  src1.bits[1] = 0b11000000010001011101010111110010;
  src1.bits[2] = 0b00100111111001000001101100000000;
  src1.bits[3] = 0b10000000000101010000000000000000;
  src2.bits[0] = 0b00010001110011011101000110000101;
  src2.bits[1] = 0b11110101101111000110111111000000;
  src2.bits[2] = 0b00000010110101010000111100111111;
  src2.bits[3] = 0b00000000000100000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b11010010000011011110010110111111;
  origin.bits[1] = 0b10100111010011100111001000100001;
  origin.bits[2] = 0b00011100010100111001110111101101;
  origin.bits[3] = 0b10000000000100010000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_20
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 12345677.987654345678987654346;
  // src2 = -87654323456.9876545678987653;
  src1.bits[0] = 0b10010001000010101111010011001010;
  src1.bits[1] = 0b11000000010001011101010111110010;
  src1.bits[2] = 0b00100111111001000001101100000000;
  src1.bits[3] = 0b00000000000101010000000000000000;
  src2.bits[0] = 0b00010001110011011101000110000101;
  src2.bits[1] = 0b11110101101111000110111111000000;
  src2.bits[2] = 0b00000010110101010000111100111111;
  src2.bits[3] = 0b10000000000100000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b11010010000011011110010110111111;
  origin.bits[1] = 0b10100111010011100111001000100001;
  origin.bits[2] = 0b00011100010100111001110111101101;
  origin.bits[3] = 0b00000000000100010000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_21
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -12345677.987654345678987654346;
  // src2 = -87654323456.9876545678987653;
  src1.bits[0] = 0b10010001000010101111010011001010;
  src1.bits[1] = 0b11000000010001011101010111110010;
  src1.bits[2] = 0b00100111111001000001101100000000;
  src1.bits[3] = 0b10000000000101010000000000000000;
  src2.bits[0] = 0b00010001110011011101000110000101;
  src2.bits[1] = 0b11110101101111000110111111000000;
  src2.bits[2] = 0b00000010110101010000111100111111;
  src2.bits[3] = 0b10000000000100000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b10010010000001100111100010100101;
  origin.bits[1] = 0b10001011011010100100100011011111;
  origin.bits[2] = 0b00011100010100011001001100010001;
  origin.bits[3] = 0b00000000000100010000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_22
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 0;
  // src2 = 0;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_23
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 0;
  // src2 = 0;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_24
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 0;
  // src2 = 0;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_25
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 79228162514264337593543950335;
  // src2 = 1;
  src1.bits[0] = 0b11111111111111111111111111111111;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b11111111111111111111111111111111;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b11111111111111111111111111111110;
  origin.bits[1] = 0b11111111111111111111111111111111;
  origin.bits[2] = 0b11111111111111111111111111111111;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_26
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 7922816251427554395;
  // src2 = 65645646;
  src1.bits[0] = 0b01011111000010000000010001011011;
  src1.bits[1] = 0b01101101111100110111111101100111;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000011111010011010110001001110;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b01011011000111100101100000001101;
  origin.bits[1] = 0b01101101111100110111111101100111;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_27
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 665464545;
  // src2 = 8798232189789785;
  src1.bits[0] = 0b00100111101010100010111011100001;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00010000010100101110011001011001;
  src2.bits[1] = 0b00000000000111110100000111110010;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b11101000101010001011011101111000;
  origin.bits[1] = 0b00000000000111110100000111110001;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_28
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 2.7986531268974139743;
  // src2 = 9.979623121254565121244554;
  src1.bits[0] = 0b11111110100100001101100101011111;
  src1.bits[1] = 0b10000100011001000010000111101000;
  src1.bits[2] = 0b00000000000000000000000000000001;
  src1.bits[3] = 0b00000000000100110000000000000000;
  src2.bits[0] = 0b11010100101011100011110110001010;
  src2.bits[1] = 0b01110100000101000010011110100011;
  src2.bits[2] = 0b00000000000010000100000101000100;
  src2.bits[3] = 0b00000000000110000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b00001110111111111010100000101010;
  origin.bits[1] = 0b00101001110101100000001000110100;
  origin.bits[2] = 0b00000000000001011111000010100001;
  origin.bits[3] = 0b10000000000110000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_29
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -9798956154578676.797564534156;
  // src2 = -2156878451.854764;
  src1.bits[0] = 0b01010100010000000011110110001100;
  src1.bits[1] = 0b10001011010100100000010101011001;
  src1.bits[2] = 0b00011111101010011000000110101101;
  src1.bits[3] = 0b10000000000011000000000000000000;
  src2.bits[0] = 0b01100101111100100100110110101100;
  src2.bits[1] = 0b00000000000001111010100110101011;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000001100000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b11010010100100100111101010001100;
  origin.bits[1] = 0b10011110100111100111000100000100;
  origin.bits[2] = 0b00011111101010011000000100111000;
  origin.bits[3] = 0b10000000000011000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_30
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 0.5456465465486476846545465485;
  // src2 = 0.68985125146545154;
  src1.bits[0] = 0b00001011000011110111000010001101;
  src1.bits[1] = 0b10010110101100000101100101010001;
  src1.bits[2] = 0b00010001101000010111101110000001;
  src1.bits[3] = 0b00000000000111000000000000000000;
  src2.bits[0] = 0b00010111001001010100110000000010;
  src2.bits[1] = 0b00000000111101010001010110011011;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000100010000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b01011010101111100101111101110011;
  origin.bits[1] = 0b00101101001111010011000001101000;
  origin.bits[2] = 0b00000100101010001101010101010111;
  origin.bits[3] = 0b10000000000111000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_31
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -0.77545545454546589781;
  // src2 = 87894515154546456456;
  src1.bits[0] = 0b10101100001010000001100001010101;
  src1.bits[1] = 0b00110100001010010001111010111100;
  src1.bits[2] = 0b00000000000000000000000000000100;
  src1.bits[3] = 0b10000000000101000000000000000000;
  src2.bits[0] = 0b00010011111011011111011110001000;
  src2.bits[1] = 0b11000011110010000000101111011001;
  src2.bits[2] = 0b00000000000000000000000000000100;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b10111000010101011100100001001001;
  origin.bits[1] = 0b01100110100011011000001100010111;
  origin.bits[2] = 0b00011100011001100111011011000001;
  origin.bits[3] = 0b10000000000010000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_32
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -1;
  // src2 = -79228162514264337593543950335;
  src1.bits[0] = 0b00000000000000000000000000000001;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b10000000000000000000000000000000;
  src2.bits[0] = 0b11111111111111111111111111111111;
  src2.bits[1] = 0b11111111111111111111111111111111;
  src2.bits[2] = 0b11111111111111111111111111111111;
  src2.bits[3] = 0b10000000000000000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b11111111111111111111111111111110;
  origin.bits[1] = 0b11111111111111111111111111111111;
  origin.bits[2] = 0b11111111111111111111111111111111;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_33
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 32323465788987654;
  // src2 = 67543278.89765424354657687;
  src1.bits[0] = 0b01011000010000110001100100000110;
  src1.bits[1] = 0b00000000011100101101011000000101;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b10111110000100011000010110010111;
  src2.bits[1] = 0b11011001001111010001001011000110;
  src2.bits[2] = 0b00000000000001011001011001001000;
  src2.bits[3] = 0b00000000000100010000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b00001110100111001011111100100101;
  origin.bits[1] = 0b11011111010111101000100010100000;
  origin.bits[2] = 0b01101000011100010101100000011011;
  origin.bits[3] = 0b00000000000011000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_34
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = -784515454.7989898652154545652;
  // src2 = -579895323215489956.67897455465;
  src1.bits[0] = 0b10110001001110110100010111110100;
  src1.bits[1] = 0b00111000100000111010110010000001;
  src1.bits[2] = 0b00011001010110010101110000011000;
  src1.bits[3] = 0b10000000000100110000000000000000;
  src2.bits[0] = 0b11100110001001011001001101101001;
  src2.bits[1] = 0b00111000110110101110001010110100;
  src2.bits[2] = 0b10111011010111111101000100011110;
  src2.bits[3] = 0b10000000000010110000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b00101100010111011001101101001111;
  origin.bits[1] = 0b11111000000111110000000110111111;
  origin.bits[2] = 0b10111011010111111101000100011001;
  origin.bits[3] = 0b00000000000010110000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_35
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 0;
  // src2 = -37986322154988653.784354545765;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b01001111101101000110000001100101;
  src2.bits[1] = 0b01000010001101101011011001100001;
  src2.bits[2] = 0b01111010101111011000110010011010;
  src2.bits[3] = 0b10000000000011000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b01001111101101000110000001100101;
  origin.bits[1] = 0b01000010001101101011011001100001;
  origin.bits[2] = 0b01111010101111011000110010011010;
  origin.bits[3] = 0b00000000000011000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test s21_sub_36
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 79228162513351883030198514100;
  // src2 = -912454563345436235;
  src1.bits[0] = 0b10110110000111000111000110110100;
  src1.bits[1] = 0b11110011010101100100111101101000;
  src1.bits[2] = 0b11111111111111111111111111111111;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b01001001111000111000111001001011;
  src2.bits[1] = 0b00001100101010011011000010010111;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b11111111111111111111111111111111;
  origin.bits[1] = 0b11111111111111111111111111111111;
  origin.bits[2] = 0b11111111111111111111111111111111;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);



#test s21_sub_38
  s21_decimal src1, src2, origin, result;
  int originerr = 0;
  // src1 = 79228162514264337593543950335;
  // src2 = 79228162514264337593543950335;
  src1.bits[0] = 0b11111111111111111111111111111111;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b11111111111111111111111111111111;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b11111111111111111111111111111111;
  src2.bits[1] = 0b11111111111111111111111111111111;
  src2.bits[2] = 0b11111111111111111111111111111111;
  src2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_sub(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

  #test int_to_dec_1
  s21_decimal result, origin;
  int src = 1;
  origin.bits[0] = 0b00000000000000000000000000000001;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int result_error = 0;
  int my_error = s21_from_int_to_decimal(src, &result);
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(result_error, my_error);

#test int_to_dec_2
  s21_decimal result, origin;
  int src = 0;
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int result_error = 0;
  int my_error = s21_from_int_to_decimal(src, &result);
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(result_error, my_error);

#test int_to_dec_3
  s21_decimal result, origin;
  int src = -1;
  origin.bits[0] = 0b00000000000000000000000000000001;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  int result_error = 0;
  int my_error = s21_from_int_to_decimal(src, &result);
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(result_error, my_error);

#test int_to_dec_4
  s21_decimal result, origin;
  int src = 2147483647;
  origin.bits[0] = 0b01111111111111111111111111111111;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int result_error = 0;
  int my_error = s21_from_int_to_decimal(src, &result);
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(result_error, my_error);

#test int_to_dec_5
  s21_decimal result, origin;
  int src = -2147483647;
  origin.bits[0] = 0b01111111111111111111111111111111;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  int result_error = 0;
  int my_error = s21_from_int_to_decimal(src, &result);
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(result_error, my_error);

#test int_to_dec_6
  s21_decimal result, origin;
  int src = -12345;
  origin.bits[0] = 0b00000000000000000011000000111001;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  int result_error = 0;
  int my_error = s21_from_int_to_decimal(src, &result);
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(result_error, my_error);

#test int_to_dec_7
  s21_decimal result, origin;
  int src = -12345;
  origin.bits[0] = 0b00000000000000000011000000111001;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  int result_error = 0;
  int my_error = s21_from_int_to_decimal(src, &result);
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(result_error, my_error);

#test int_to_dec_8
  s21_decimal result, origin;
  int src = 0;
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int result_error = 0;
  int my_error = s21_from_int_to_decimal(src, &result);
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(result_error, my_error);

#test int_to_dec_9
  s21_decimal result, origin;
  int src = 45678;
  origin.bits[0] = 0b00000000000000001011001001101110;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int result_error = 0;
  int my_error = s21_from_int_to_decimal(src, &result);
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(result_error, my_error);

#test int_to_dec_10
  s21_decimal result, origin;
  int src = -45678;
  origin.bits[0] = 0b00000000000000001011001001101110;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  int result_error = 0;
  int my_error = s21_from_int_to_decimal(src, &result);
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(result_error, my_error);

#test int_to_dec_11
  s21_decimal result, origin;
  int src = 5555555;
  origin.bits[0] = 0b00000000010101001100010101100011;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int result_error = 0;
  int my_error = s21_from_int_to_decimal(src, &result);
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(result_error, my_error);

#test int_to_dec_12
  s21_decimal result, origin;
  int src = -5555555;
  origin.bits[0] = 0b00000000010101001100010101100011;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  int result_error = 0;
  int my_error = s21_from_int_to_decimal(src, &result);
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(result_error, my_error);

#test int_to_dec_13
  s21_decimal result, origin;
  int src = 127;
  origin.bits[0] = 0b00000000000000000000000001111111;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int result_error = 0;
  int my_error = s21_from_int_to_decimal(src, &result);
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(result_error, my_error);

#test int_to_dec_14
  s21_decimal result, origin;
  int src = -127;
  origin.bits[0] = 0b00000000000000000000000001111111;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  int result_error = 0;
  int my_error = s21_from_int_to_decimal(src, &result);
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(result_error, my_error);

#test int_to_dec_15
  s21_decimal result, origin;
  int src = 34567898;
  origin.bits[0] = 0b00000010000011110111011011011010;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int result_error = 0;
  int my_error = s21_from_int_to_decimal(src, &result);
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(result_error, my_error);

#test int_to_dec_16
  s21_decimal result, origin;
  int src = -34567898;
  origin.bits[0] = 0b00000010000011110111011011011010;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  int result_error = 0;
  int my_error = s21_from_int_to_decimal(src, &result);
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(result_error, my_error);

#test int_to_dec_17
  s21_decimal result, origin;
  int src = 999;
  origin.bits[0] = 0b00000000000000000000001111100111;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int result_error = 0;
  int my_error = s21_from_int_to_decimal(src, &result);
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(result_error, my_error);

#test int_to_dec_18
  s21_decimal result, origin;
  int src = -999;
  origin.bits[0] = 0b00000000000000000000001111100111;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  int result_error = 0;
  int my_error = s21_from_int_to_decimal(src, &result);
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(result_error, my_error);

#test int_to_dec_19
  s21_decimal result, origin;
  int src = -3254754;
  origin.bits[0] = 0b00000000001100011010100111100010;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  int result_error = 0;
  int my_error = s21_from_int_to_decimal(src, &result);
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(result_error, my_error);

#test int_to_dec_20
  s21_decimal result, origin;
  int src = 3436425;
  origin.bits[0] = 0b00000000001101000110111110001001;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int result_error = 0;
  int my_error = s21_from_int_to_decimal(src, &result);
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(result_error, my_error);

#test int_to_dec_21
  s21_decimal result, origin;
  int src = 222222222;
  origin.bits[0] = 0b00001101001111101101011110001110;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int result_error = 0;
  int my_error = s21_from_int_to_decimal(src, &result);
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(result_error, my_error);

#test dec_to_int_1
  s21_decimal src;
  src.bits[0] = 0b00000000000000000000000000110010;
  src.bits[1] = 0b00000000000000000000000000000000;
  src.bits[2] = 0b00000000000000000000000000000000;
  src.bits[3] = 0b00000000000000000000000000000000;
  int result = 0;
  int origin = 50;
  int origin_error = 0;
  int my_error = s21_from_decimal_to_int(src, &result);
  ck_assert_int_eq(origin, result);
  ck_assert_int_eq(origin_error, my_error);

#test dec_to_int_2
  s21_decimal src;
  src.bits[0] = 0b00000000000000000000000000100010;
  src.bits[1] = 0b00000000000000000000000000000000;
  src.bits[2] = 0b00000000000000000000000000000000;
  src.bits[3] = 0b00000000000000000000000000000000;
  int result = 0;
  int origin = 34;
  int origin_error = 0;
  int my_error = s21_from_decimal_to_int(src, &result);
  ck_assert_int_eq(origin, result);
  ck_assert_int_eq(origin_error, my_error);

#test dec_to_int_3
  s21_decimal src;
  src.bits[0] = 0b00000000000000000000000000000000;
  src.bits[1] = 0b00000000000000000000000000000000;
  src.bits[2] = 0b00000000000000000000000000000000;
  src.bits[3] = 0b00000000000000010000000000000000;
  int result = 0;
  int origin = 0;
  int origin_error = 0;
  int my_error = s21_from_decimal_to_int(src, &result);
  ck_assert_int_eq(origin, result);
  ck_assert_int_eq(origin_error, my_error);

#test dec_to_int_4
  s21_decimal src;
  src.bits[0] = 0b00000001011100111100000111000111;
  src.bits[1] = 0b00000000000000000000000000000000;
  src.bits[2] = 0b00000000000000000000000000000000;
  src.bits[3] = 0b10000000000000000000000000000000;
  int result = 0;
  int origin = -24363463;
  int origin_error = 0;
  int my_error = s21_from_decimal_to_int(src, &result);
  ck_assert_int_eq(origin, result);
  ck_assert_int_eq(origin_error, my_error);

#test dec_to_int_5
  s21_decimal src;
  src.bits[0] = 0b00000000000000000000000000000000;
  src.bits[1] = 0b00000000000000000000000000000000;
  src.bits[2] = 0b00000000000000000000000000000000;
  src.bits[3] = 0b10000000000000000000000000000000;
  int result = 0;
  int origin = 0;
  int origin_error = 0;
  int my_error = s21_from_decimal_to_int(src, &result);
  ck_assert_int_eq(origin, result);
  ck_assert_int_eq(origin_error, my_error);

#test dec_to_int_6
  s21_decimal src;
  src.bits[0] = 0b00000000000000000000000000101101;
  src.bits[1] = 0b00000000000000000000000000000000;
  src.bits[2] = 0b00000000000000000000000000000000;
  src.bits[3] = 0b10000000000000000000000000000000;
  int result = 0;
  int origin = -45;
  int origin_error = 0;
  int my_error = s21_from_decimal_to_int(src, &result);
  ck_assert_int_eq(origin, result);
  ck_assert_int_eq(origin_error, my_error);

#test dec_to_int_7
  s21_decimal src;
  src.bits[0] = 0b00000011111000110110011011000111;
  src.bits[1] = 0b00000000000000000000000000000000;
  src.bits[2] = 0b00000000000000000000000000000000;
  src.bits[3] = 0b00000000000000000000000000000000;
  int result = 0;
  int origin = 65234631;
  int origin_error = 0;
  int my_error = s21_from_decimal_to_int(src, &result);
  ck_assert_int_eq(origin, result);
  ck_assert_int_eq(origin_error, my_error);

#test dec_to_int_8
  s21_decimal src;
  src.bits[0] = 0b00011101101010010010000100011011;
  src.bits[1] = 0b00000000000000000000000000000000;
  src.bits[2] = 0b00000000000000000000000000000000;
  src.bits[3] = 0b00000000000000000000000000000000;
  int result = 0;
  int origin = 497623323;
  int origin_error = 0;
  int my_error = s21_from_decimal_to_int(src, &result);
  ck_assert_int_eq(origin, result);
  ck_assert_int_eq(origin_error, my_error);

#test dec_to_int_9
  s21_decimal src;
  src.bits[0] = 0b10000111010110110010011111110011;
  src.bits[1] = 0b00000000000000000000000000000001;
  src.bits[2] = 0b00000000000000000000000000000000;
  src.bits[3] = 0b00000000000000000000000000000000;
  int result = 0;
  int origin = 0;
  int origin_error = 1;
  int my_error = s21_from_decimal_to_int(src, &result);
  ck_assert_int_eq(origin, result);
  ck_assert_int_eq(origin_error, my_error);

#test dec_to_int_10
  s21_decimal src;
  src.bits[0] = 0b00010101101111011001110101001110;
  src.bits[1] = 0b00000000000000000000000000000000;
  src.bits[2] = 0b00000000000000000000000000000000;
  src.bits[3] = 0b10000000000000000000000000000000;
  int result = 0;
  int origin = -364748110;
  int origin_error = 0;
  int my_error = s21_from_decimal_to_int(src, &result);
  ck_assert_int_eq(origin, result);
  ck_assert_int_eq(origin_error, my_error);

#test dec_to_int_11
  s21_decimal src;
  src.bits[0] = 0b01101000011010011010001100101111;
  src.bits[1] = 0b00000000000000000001001000010011;
  src.bits[2] = 0b00000000000000000000000000000000;
  src.bits[3] = 0b00000000000000000000000000000000;
  int result = 0;
  int origin = 0;
  int origin_error = 1;
  int my_error = s21_from_decimal_to_int(src, &result);
  ck_assert_int_eq(origin, result);
  ck_assert_int_eq(origin_error, my_error);

#test dec_to_int_12
  s21_decimal src;
  src.bits[0] = 0b00010110010010101110101011000000;
  src.bits[1] = 0b00000000000000000000100011111100;
  src.bits[2] = 0b00000000000000000000000000000000;
  src.bits[3] = 0b10000000000010110000000000000000;
  int result = 0;
  int origin = 0;
  int origin_error = 1;
  int my_error = s21_from_decimal_to_int(src, &result);
  ck_assert_int_eq(origin, result);
  ck_assert_int_eq(origin_error, my_error);

#test dec_to_int_13
  s21_decimal src;
  src.bits[0] = 0b00111011100110101100100111111001;
  src.bits[1] = 0b00000000000000000000000000000000;
  src.bits[2] = 0b00000000000000000000000000000000;
  src.bits[3] = 0b00000000000000000000000000000000;
  int result = 0;
  int origin = 999999993;
  int origin_error = 0;
  int my_error = s21_from_decimal_to_int(src, &result);
  ck_assert_int_eq(origin, result);
  ck_assert_int_eq(origin_error, my_error);

#test dec_to_int_14
  s21_decimal src;
  src.bits[0] = 0b11001010011010010001110011000010;
  src.bits[1] = 0b10011001110101001010110100100110;
  src.bits[2] = 0b10110000001111100010111010011101;
  src.bits[3] = 0b10000000000101110000000000000000;
  int result = 0;
  int origin = 0;
  int origin_error = 1;
  int my_error = s21_from_decimal_to_int(src, &result);
  ck_assert_int_eq(origin, result);
  ck_assert_int_eq(origin_error, my_error);

#test dec_to_int_15
  s21_decimal src;
  src.bits[0] = 0b11101010011100001110100101000111;
  src.bits[1] = 0b10100010011001110000111100001010;
  src.bits[2] = 0b10110000001111101111000100010000;
  src.bits[3] = 0b00000000000101100000000000000000;
  int result = 0;
  int origin = 0;
  int origin_error = 1;
  int my_error = s21_from_decimal_to_int(src, &result);
  ck_assert_int_eq(origin, result);
  ck_assert_int_eq(origin_error, my_error);

#test dec_to_int_16
  s21_decimal src;
  src.bits[0] = 0b11101010001011100110110001010100;
  src.bits[1] = 0b00100111000110111110101011111001;
  src.bits[2] = 0b00011001101111000001110101101001;
  src.bits[3] = 0b00000000000101000000000000000000;
  int result = 0;
  int origin = 0;
  int origin_error = 1;
  int my_error = s21_from_decimal_to_int(src, &result);
  ck_assert_int_eq(origin, result);
  ck_assert_int_eq(origin_error, my_error);

#test dec_to_int_17
  s21_decimal src;
  src.bits[0] = 0b10010001000010101111010011001010;
  src.bits[1] = 0b11000000010001011101010111110010;
  src.bits[2] = 0b00100111111001000001101100000000;
  src.bits[3] = 0b00000000000101010000000000000000;
  int result = 0;
  int origin = 0;
  int origin_error = 1;
  int my_error = s21_from_decimal_to_int(src, &result);
  ck_assert_int_eq(origin, result);
  ck_assert_int_eq(origin_error, my_error);

#test dec_to_int_18
  s21_decimal src;
  src.bits[0] = 0b10010001000010101111010011001010;
  src.bits[1] = 0b11000000010001011101010111110010;
  src.bits[2] = 0b00100111111001000001101100000000;
  src.bits[3] = 0b10000000000101010000000000000000;
  int result = 0;
  int origin = 0;
  int origin_error = 1;
  int my_error = s21_from_decimal_to_int(src, &result);
  ck_assert_int_eq(origin, result);
  ck_assert_int_eq(origin_error, my_error);

#test dec_to_int_19
  s21_decimal src;
  src.bits[0] = 0b10011100101100011101000110000101;
  src.bits[1] = 0b01100001100101011101011101110110;
  src.bits[2] = 0b00000000000000000000000011101010;
  src.bits[3] = 0b00000000000100000000000000000000;
  int result = 0;
  int origin = 0;
  int origin_error = 1;
  int my_error = s21_from_decimal_to_int(src, &result);
  ck_assert_int_eq(origin, result);
  ck_assert_int_eq(origin_error, my_error);

#test dec_to_int_20
  s21_decimal src;
  src.bits[0] = 0b01100001011111010111001111001001;
  src.bits[1] = 0b00000000100111100100000111010001;
  src.bits[2] = 0b00000000000000000000000000000000;
  src.bits[3] = 0b00000000000010010000000000000000;
  int result = 0;
  int origin = 0;
  int origin_error = 1;
  int my_error = s21_from_decimal_to_int(src, &result);
  ck_assert_int_eq(origin, result);
  ck_assert_int_eq(origin_error, my_error);

#test dec_to_int_21
  s21_decimal src;
  src.bits[0] = 0b01011100000110001011011001101010;
  src.bits[1] = 0b00000000000000000000000000000000;
  src.bits[2] = 0b00000000000000000000000000000000;
  src.bits[3] = 0b10000000000000000000000000000000;
  int result = 0;
  int origin = -1545123434;
  int origin_error = 0;
  int my_error = s21_from_decimal_to_int(src, &result);
  ck_assert_int_eq(origin, result);
  ck_assert_int_eq(origin_error, my_error);

#test dec_to_int_22
  s21_decimal src;
  src.bits[0] = 0b11011100100001110000101110111001;
  src.bits[1] = 0b00000000000000000000000000001001;
  src.bits[2] = 0b00000000000000000000000000000000;
  src.bits[3] = 0b10000000000000000000000000000000;
  int result = 0;
  int origin = 0;
  int origin_error = 1;
  int my_error = s21_from_decimal_to_int(src, &result);
  ck_assert_int_eq(origin, result);
  ck_assert_int_eq(origin_error, my_error);

#test dec_to_int_23
  s21_decimal src;
  src.bits[0] = 0b10101001101110110110011111111111;
  src.bits[1] = 0b00001010111111101100000000000000;
  src.bits[2] = 0b00000000000000000000000000000000;
  src.bits[3] = 0b00000000000011000000000000000000;
  int result = 0;
  int origin = 0;
  int origin_error = 1;
  int my_error = s21_from_decimal_to_int(src, &result);
  ck_assert_int_eq(origin, result);
  ck_assert_int_eq(origin_error, my_error);

#test dec_to_int_24
  s21_decimal src;
  src.bits[0] = 0b11111110100100001101100101011111;
  src.bits[1] = 0b10000100011001000010000111101000;
  src.bits[2] = 0b00000000000000000000000000000001;
  src.bits[3] = 0b00000000000100110000000000000000;
  int result = 0;
  int origin = 0;
  int origin_error = 1;
  int my_error = s21_from_decimal_to_int(src, &result);
  ck_assert_int_eq(origin, result);
  ck_assert_int_eq(origin_error, my_error);
  

#test s21_float_to_dec_1
  float src = 1;
  s21_decimal result, origin;
  int my_error = s21_from_float_to_decimal(src, &result);
  int origin_error = 0;
  origin.bits[0] = 0b00000000000000000000000000000001;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(origin_error, my_error);


#test s21_float_to_dec_2
  float src = -3;
  s21_decimal result, origin;
  int my_error = s21_from_float_to_decimal(src, &result);
  int origin_error = 0;
  origin.bits[0] = 0b00000000000000000000000000000011;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(origin_error, my_error);


#test s21_float_to_dec_3
  float src = 5.289365;
  s21_decimal result, origin;
  int my_error = s21_from_float_to_decimal(src, &result);
  int origin_error = 0;
  origin.bits[0] = 0b00000000010100001011010110010101;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000001100000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(origin_error, my_error);


#test s21_float_to_dec_4
  float src = 0.2364752;
  s21_decimal result, origin;
  int my_error = s21_from_float_to_decimal(src, &result);
  int origin_error = 0;
  origin.bits[0] = 0b00000000001001000001010101010000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000001110000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(origin_error, my_error);


#test s21_float_to_dec_10
  float src = -1.988766;
  s21_decimal result, origin;
  int my_error = s21_from_float_to_decimal(src, &result);
  int origin_error = 0;
  origin.bits[0] = 0b00000000000111100101100010011110;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000001100000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(origin_error, my_error);


#test s21_float_to_dec_11
  float src = 1.928318;
  s21_decimal result, origin;
  int my_error = s21_from_float_to_decimal(src, &result);
  int origin_error = 0;
  origin.bits[0] = 0b00000000000111010110110001111110;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000001100000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(origin_error, my_error);


#test s21_float_to_dec_13
  float src = -1098765.6;
  s21_decimal result, origin;
  int my_error = s21_from_float_to_decimal(src, &result);
  int origin_error = 0;
  origin.bits[0] = 0b00000000101001111010100010001000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000010000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(origin_error, my_error);


#test s21_float_to_dec_31
  float src = 0.1111111;
  s21_decimal result, origin;
  int my_error = s21_from_float_to_decimal(src, &result);
  int origin_error = 0;
  origin.bits[0] = 0b00000000000100001111010001000111;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000001110000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(origin_error, my_error);


#test s21_float_to_dec_36
  float src = 0;
  s21_decimal result, origin;
  int my_error = s21_from_float_to_decimal(src, &result);
  int origin_error = 0;
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(origin_error, my_error);


#test float_to_dec_41
  float src = 3.14E-38;
  s21_decimal result;
  s21_from_float_to_decimal(src, &result);
  s21_decimal origin;
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);


#test dec_to_float_1
  s21_decimal number;
  // decimal: 2.0
  // float: 2
  // int: 1073741824
  number.bits[0] = 0b00000000000000000000000000010100;
  number.bits[1] = 0b00000000000000000000000000000000;
  number.bits[2] = 0b00000000000000000000000000000000;
  number.bits[3] = 0b00000000000000010000000000000000;
  int result_int = 1073741824;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);


#test dec_to_float_2
  s21_decimal number;
  // decimal: -0.8
  // float: -0.8
  // int: -1085485875
  number.bits[0] = 0b00000000000000000000000000001000;
  number.bits[1] = 0b00000000000000000000000000000000;
  number.bits[2] = 0b00000000000000000000000000000000;
  number.bits[3] = 0b10000000000000010000000000000000;
  int result_int = -1085485875;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);


#test dec_to_float_3
  s21_decimal number;
  // decimal: 0
  // float: 0
  // int: 0
  number.bits[0] = 0b00000000000000000000000000000000;
  number.bits[1] = 0b00000000000000000000000000000000;
  number.bits[2] = 0b00000000000000000000000000000000;
  number.bits[3] = 0b00000000000000000000000000000000;
  int result_int = 0;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);


#test dec_to_float_4
  s21_decimal number;
  // decimal: 1
  // float: 1
  // int: 1065353216
  number.bits[0] = 0b00000000000000000000000000000001;
  number.bits[1] = 0b00000000000000000000000000000000;
  number.bits[2] = 0b00000000000000000000000000000000;
  number.bits[3] = 0b00000000000000000000000000000000;
  int result_int = 1065353216;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);


#test dec_to_float_5
  s21_decimal number;
  // decimal: 0.0
  // float: 0
  // int: -2147483648
  number.bits[0] = 0b00000000000000000000000000000000;
  number.bits[1] = 0b00000000000000000000000000000000;
  number.bits[2] = 0b00000000000000000000000000000000;
  number.bits[3] = 0b10000000000000010000000000000000;
  int result_int = -2147483648;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);


#test dec_to_float_6
  s21_decimal number;
  // decimal: -1.75
  // float: -1.75
  // int: -1075838976
  number.bits[0] = 0b00000000000000000000000010101111;
  number.bits[1] = 0b00000000000000000000000000000000;
  number.bits[2] = 0b00000000000000000000000000000000;
  number.bits[3] = 0b10000000000000100000000000000000;
  int result_int = -1075838976;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);

#test dec_to_float_7
  s21_decimal number;
  // decimal: 6521
  // float: 6521
  // int: 1170982912
  number.bits[0] = 0b00000000000000000001100101111001;
  number.bits[1] = 0b00000000000000000000000000000000;
  number.bits[2] = 0b00000000000000000000000000000000;
  number.bits[3] = 0b00000000000000000000000000000000;
  int result_int = 1170982912;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);

#test dec_to_float_8
  s21_decimal number;
  // decimal: 4
  // float: 4
  // int: 1082130432
  number.bits[0] = 0b00000000000000000000000000000100;
  number.bits[1] = 0b00000000000000000000000000000000;
  number.bits[2] = 0b00000000000000000000000000000000;
  number.bits[3] = 0b00000000000000000000000000000000;
  int result_int = 1082130432;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);


#test dec_to_float_9
  s21_decimal number;
  // decimal: 65658654
  // float: 6.565866E+07
  // int: 1283094472
  number.bits[0] = 0b00000011111010011101111100011110;
  number.bits[1] = 0b00000000000000000000000000000000;
  number.bits[2] = 0b00000000000000000000000000000000;
  number.bits[3] = 0b00000000000000000000000000000000;
  int result_int = 1283094472;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);


#test dec_to_float_10
  s21_decimal number;
  // decimal: -364748
  // float: -364748
  // int: -927852160
  number.bits[0] = 0b00000000000001011001000011001100;
  number.bits[1] = 0b00000000000000000000000000000000;
  number.bits[2] = 0b00000000000000000000000000000000;
  number.bits[3] = 0b10000000000000000000000000000000;
  int result_int = -927852160;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);


#test dec_to_float_11
  s21_decimal number;
  // decimal: 0.003
  // float: 0.003
  // int: 994352038
  number.bits[0] = 0b00000000000000000000000000000011;
  number.bits[1] = 0b00000000000000000000000000000000;
  number.bits[2] = 0b00000000000000000000000000000000;
  number.bits[3] = 0b00000000000000110000000000000000;
  int result_int = 994352038;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);


#test dec_to_float_12
  s21_decimal number;
  // decimal: -9878798789
  // float: -9.878798E+09
  // int: -804047712
  number.bits[0] = 0b01001100110100101000000111000101;
  number.bits[1] = 0b00000000000000000000000000000010;
  number.bits[2] = 0b00000000000000000000000000000000;
  number.bits[3] = 0b10000000000000000000000000000000;
  int result_int = -804047712;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);


#test dec_to_float_13
  s21_decimal number;
  // decimal: 9959999999999999999
  // float: 9.96E+18
  // int: 1594505479
  number.bits[0] = 0b11001010111000111111111111111111;
  number.bits[1] = 0b10001010001110010000011100111010;
  number.bits[2] = 0b00000000000000000000000000000000;
  number.bits[3] = 0b00000000000000000000000000000000;
  int result_int = 1594505479;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);


#test dec_to_float_14
  s21_decimal number;
  // decimal: 18446744073709551615
  // float: 1.844674E+19
  // int: 1602224128
  number.bits[0] = 0b11111111111111111111111111111111;
  number.bits[1] = 0b11111111111111111111111111111111;
  number.bits[2] = 0b00000000000000000000000000000000;
  number.bits[3] = 0b00000000000000000000000000000000;
  int result_int = 1602224128;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);


#test dec_to_float_15
  s21_decimal number;
  // decimal: 18445744073709551615.353534
  // float: 1.844574E+19
  // int: 1602223219
  number.bits[0] = 0b00100001010101100010001010111110;
  number.bits[1] = 0b11001010001101100101001000111010;
  number.bits[2] = 0b00000000000011110100001000001001;
  number.bits[3] = 0b00000000000001100000000000000000;
  int result_int = 1602223219;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);


#test dec_to_float_16
  s21_decimal number;
  // decimal: -5.4543453434545454535265454546
  // float: -5.454345
  // int: -1062303233
  number.bits[0] = 0b10101111010001111000100111010010;
  number.bits[1] = 0b01101110000001111100110010011000;
  number.bits[2] = 0b10110000001111010100100110000111;
  number.bits[3] = 0b10000000000111000000000000000000;
  int result_int = -1062303233;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);


#test dec_to_float_17
  s21_decimal number;
  // decimal: -5454545545352456454545645464
  // float: -5.454546E+27
  // int: -309526744
  number.bits[0] = 0b10001000100000001001111110011000;
  number.bits[1] = 0b10000010011101100000001010011001;
  number.bits[2] = 0b00010001100111111110010011110010;
  number.bits[3] = 0b10000000000000000000000000000000;
  int result_int = -309526744;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);


#test dec_to_float_18
  s21_decimal number;
  // decimal: 79228162514264337593543950335
  // float: 7.922816E+28
  // int: 1870659584
  number.bits[0] = 0b11111111111111111111111111111111;
  number.bits[1] = 0b11111111111111111111111111111111;
  number.bits[2] = 0b11111111111111111111111111111111;
  number.bits[3] = 0b00000000000000000000000000000000;
  int result_int = 1870659584;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);


#test dec_to_float_19
  s21_decimal number;
  // decimal: 1234.5677987654345678987654346
  // float: 1234.568
  // int: 1150964267
  number.bits[0] = 0b10010001000010101111010011001010;
  number.bits[1] = 0b11000000010001011101010111110010;
  number.bits[2] = 0b00100111111001000001101100000000;
  number.bits[3] = 0b00000000000110010000000000000000;
  int result_int = 1150964267;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);


#test dec_to_float_20
  s21_decimal number;
  // decimal: -123458677.98765434567898765435
  // float: -1.234587E+08
  // int: -856982897
  number.bits[0] = 0b10111001000000010001100001111011;
  number.bits[1] = 0b01101110100110001001011011101100;
  number.bits[2] = 0b00100111111001000100001100110010;
  number.bits[3] = 0b10000000000101000000000000000000;
  int result_int = -856982897;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);


#test dec_to_float_21
  s21_decimal number;
  // decimal: 123445677.98765434567898765435
  // float: 1.234457E+08
  // int: 1290499126
  number.bits[0] = 0b00110100100000010001100001111011;
  number.bits[1] = 0b01001010011100100010011000011110;
  number.bits[2] = 0b00100111111000110010111111101001;
  number.bits[3] = 0b00000000000101000000000000000000;
  int result_int = 1290499126;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);

#test dec_to_float_22
  s21_decimal number;
  // decimal: -12345677.987654533456789876543
  // float: -1.234568E+07
  // int: -885235378
  number.bits[0] = 0b11111110001111011010111100111111;
  number.bits[1] = 0b11000000010001101000000010111010;
  number.bits[2] = 0b00100111111001000001101100000000;
  number.bits[3] = 0b10000000000101010000000000000000;
  int result_int = -885235378;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);

#test dec_to_float_23
  s21_decimal number;
  // decimal: 0.0000000000000000001
  // float: 1E-19
  // int: 535567946
  number.bits[0] = 0b00000000000000000000000000000001;
  number.bits[1] = 0b00000000000000000000000000000000;
  number.bits[2] = 0b00000000000000000000000000000000;
  number.bits[3] = 0b00000000000100110000000000000000;
  int result_int = 535567946;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);

#test dec_to_float_24
  s21_decimal number;
  // decimal: 0.0000000000000000000000000001
  // float: 1E-28
  // int: 285050806
  number.bits[0] = 0b00000000000000000000000000000001;
  number.bits[1] = 0b00000000000000000000000000000000;
  number.bits[2] = 0b00000000000000000000000000000000;
  number.bits[3] = 0b00000000000111000000000000000000;
  int result_int = 285050806;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);


#test dec_to_float_25
  s21_decimal number;
  // decimal: 0.0000000000000000000000000000
  // float: 0
  // int: -2147483648
  number.bits[0] = 0b00000000000000000000000000000000;
  number.bits[1] = 0b00000000000000000000000000000000;
  number.bits[2] = 0b00000000000000000000000000000000;
  number.bits[3] = 0b10000000000111000000000000000000;
  int result_int = -2147483648;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);

#test dec_to_float_26
  s21_decimal number;
  // decimal: -79228162514264337593543950335
  // float: -7.922816E+28
  // int: -276824064
  number.bits[0] = 0b11111111111111111111111111111111;
  number.bits[1] = 0b11111111111111111111111111111111;
  number.bits[2] = 0b11111111111111111111111111111111;
  number.bits[3] = 0b10000000000000000000000000000000;
  int result_int = -276824064;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);


#test dec_to_float_27
  s21_decimal number;
  // decimal: -792.28162514264337593543950335
  // float: -792.2816
  // int: -1002040826
  number.bits[0] = 0b11111111111111111111111111111111;
  number.bits[1] = 0b11111111111111111111111111111111;
  number.bits[2] = 0b11111111111111111111111111111111;
  number.bits[3] = 0b10000000000110100000000000000000;
  int result_int = -1002040826;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);

#test dec_to_float_28
  s21_decimal number;
  // decimal: -79228162514264337593543950335
  // float: -7.922816E+28
  // int: -276824064
  number.bits[0] = 0b11111111111111111111111111111111;
  number.bits[1] = 0b11111111111111111111111111111111;
  number.bits[2] = 0b11111111111111111111111111111111;
  number.bits[3] = 0b10000000000000000000000000000000;
  int result_int = -276824064;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);


#test dec_to_float_29
  s21_decimal number;
  // decimal: 2.7986531268974139743
  // float: 2.798653
  // int: 1077091618
  number.bits[0] = 0b11111110100100001101100101011111;
  number.bits[1] = 0b10000100011001000010000111101000;
  number.bits[2] = 0b00000000000000000000000000000001;
  number.bits[3] = 0b00000000000100110000000000000000;
  int result_int = 1077091618;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);

#test dec_to_float_30
  s21_decimal number;
  // decimal: -9798956154578676.797564534156
  // float: -9.798956E+15
  // int: -636796827
  number.bits[0] = 0b01010100010000000011110110001100;
  number.bits[1] = 0b10001011010100100000010101011001;
  number.bits[2] = 0b00011111101010011000000110101101;
  number.bits[3] = 0b10000000000011000000000000000000;
  int result_int = -636796827;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);

#test dec_to_float_31
  s21_decimal number;
  // decimal: 5.4564654654864768465454654846
  // float: 5.456465
  // int: 1085184861
  number.bits[0] = 0b01101110100110100110010101111110;
  number.bits[1] = 0b11100010111000110111110100101010;
  number.bits[2] = 0b10110000010011101101001100001111;
  number.bits[3] = 0b00000000000111000000000000000000;
  int result_int = 1085184861;
  int result_error = 0;
  float my_float;
  int my_error = s21_from_decimal_to_float(number, &my_float);
  int my_int = *(int *)&my_float;
  ck_assert_int_eq(result_int, my_int);
  ck_assert_int_eq(result_error, my_error);
